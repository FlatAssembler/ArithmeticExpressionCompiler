;Generated by Arithmetic Expression Compiler (http://flatassembler.000webhostapp.com/compiler.html) run in Duktape.
;;Implementacija MergeSorta u AEC-u.
;Inline assembly begins.
ispisPoruka=1
macro staviIntNaSistemskiStog x
{
sub esp,4
fld dword [x]
fistp dword [esp]
}
macro staviPokazivacNaSistemskiStog x
{
sub esp,4
lea ebx,[x]
mov [esp],ebx
}
macro staviStringNaSistemskiStog x
{
sub esp,4
mov dword [esp],x
}
format PE console
entry start

include 'win32a.inc'

section '.text' code executable
start:
if ispisPoruka=1
jmp velicinaUnosa$
velicinaUnosa db "Unesite koliko cete brojeva unijeti.",10,0
velicinaUnosa$:
staviStringNaSistemskiStog velicinaUnosa
call [printf]
end if
staviPokazivacNaSistemskiStog n
jmp znakZaFloat$
znakZaFloat db "%f",0
znakZaFloat$:
staviStringNaSistemskiStog znakZaFloat
call [scanf]
if ispisPoruka=1
jmp pitajZaUnos$
pitajZaUnos db "Unesite te brojeve:",10,0
pitajZaUnos$:
staviStringNaSistemskiStog pitajZaUnos
call [printf]
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
push dword [result]
pop dword [i]
;brojac:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
push dword [result]
pop dword [brojac]
;vrhStoga:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
push dword [result]
pop dword [vrhStoga]
;While i<n
finit
l351090:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l355903
fld1
jmp l843972
l355903:
fldz
l843972:
fistp dword [result]
mov eax,[result]
test eax,eax
je l870119
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;4
fld dword [result]
fld dword [i]
fmulp st1,st0
fstp dword [result]
push dword [result]
pop dword [pokazivac]
;Inline assembly begins.
fld dword [pokazivac]
fistp dword [pokazivac]
lea ebx,[original]
add ebx,[pokazivac]
staviPokazivacNaSistemskiStog ebx
staviStringNaSistemskiStog znakZaFloat
call [scanf]
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [i]
;EndWhile
finit
jmp l351090
l870119:
;Inline assembly begins.
call [clock]
mov [procesorskoVrijeme],eax
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [vrhStoga]
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSDonjimGranicama+4*ebx]
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSGornjimGranicama+4*ebx]
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx]
;While vrhStoga>0
finit
l279058:
fld dword [vrhStoga]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jnb l370869
fld1
jmp l131450
l370869:
fldz
l131450:
fistp dword [result]
mov eax,[result]
test eax,eax
je l271352
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
push dword [result]
pop dword [gornjaGranica]
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
push dword [result]
pop dword [donjaGranica]
;trebaLiSpajatiIliRazdvajati:=stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
push dword [result]
pop dword [trebaLiSpajatiIliRazdvajati]
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fstp dword [result]
push dword [result]
pop dword [vrhStoga]
;sredinaNiza:=(donjaGranica+gornjaGranica)/2
finit
fld dword [donjaGranica]
fld dword [gornjaGranica]
faddp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fdivp st1,st0
fstp dword [result]
push dword [result]
pop dword [sredinaNiza]
;sredinaNiza:=sredinaNiza-mod(sredinaNiza,1) ;Kada u svoj jezik nisam ugradio "floor" naredbu.
finit
fld dword [sredinaNiza]
mov dword [result],0x3F800000 ;1
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
fld dword [sredinaNiza]
fxch
fsubp st1,st0
fstp dword [result]
push dword [result]
pop dword [sredinaNiza]
;If trebaLiSpajatiIliRazdvajati=0 ;Razdvajanje niza u dva priblizno jednaka, njihova granica ce biti "sredinaNiza" (ona ce pripadati drugom nizu, a sve do nje prvom nizu).
finit
fld dword [trebaLiSpajatiIliRazdvajati]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jne l697364
fld1
jmp l112987
l697364:
fldz
l112987:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l464153
;If gornjaGranica-donjaGranica>1 ;Niz velicine 1 ili 0 uvijek je poredan, i ne trebamo nista dalje raditi.
finit
fld dword [gornjaGranica]
fld dword [donjaGranica]
fsubp st1,st0
mov dword [result],0x3F800000 ;1
fld dword [result]
fcomip st1
fstp dword [result]
jnb l205392
fld1
jmp l168064
l205392:
fldz
l168064:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l962400
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [vrhStoga]
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSDonjimGranicama+4*ebx]
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSGornjimGranicama+4*ebx]
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=1 ;Nakon sto smo poredali ta dva niza, trebamo ih spojiti.
finit
mov dword [result],0x3F800000 ;1
fld dword [result]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx]
;;Podatak o sadasnjim granicama stavljamo prvi na stog kako bi bio zadnji izvaden sa stoga.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [vrhStoga]
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSDonjimGranicama+4*ebx]
;stogSGornjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSGornjimGranicama+4*ebx]
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx]
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [vrhStoga]
;stogSDonjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSDonjimGranicama+4*ebx]
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSGornjimGranicama+4*ebx]
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx]
;EndIf
finit
l962400:
l430904:
;Else ;Spajanje dva poredana niza u treci poredani niz, gdje prvi niz ima granice "donjaGranica" i "sredinaNiza", a drugi "sredinaNiza" i "gornjaGranica".
finit
jmp l530521
l464153:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
push dword [result]
pop dword [i]
;gdjeSmoUPrvomNizu:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
push dword [result]
pop dword [gdjeSmoUPrvomNizu]
;gdjeSmoUDrugomNizu:=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
push dword [result]
pop dword [gdjeSmoUDrugomNizu]
;While i<gornjaGranica
finit
l910971:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l163093
fld1
jmp l592391
l163093:
fldz
l592391:
fistp dword [result]
mov eax,[result]
test eax,eax
je l358446
;If (gdjeSmoUPrvomNizu=sredinaNiza | original(gdjeSmoUDrugomNizu)<original(gdjeSmoUPrvomNizu)) & gdjeSmoUDrugomNizu<gornjaGranica
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna l521866
fld1
jmp l435637
l521866:
fldz
l435637:
fld dword [gdjeSmoUPrvomNizu]
fld dword [sredinaNiza]
fcomip st1
fstp dword [result]
jne l569522
fld1
jmp l103768
l569522:
fldz
l103768:
fxch
fistp dword [result]
mov eax,[result]
fistp dword [result]
or [result],eax
fild dword [result]
fld dword [gdjeSmoUDrugomNizu]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l626045
fld1
jmp l428485
l626045:
fldz
l428485:
fistp dword [result]
mov eax,[result]
fistp dword [result]
and [result],eax
fild dword [result]
fistp dword [result]
mov eax,[result]
test eax,eax
jz l122896
;pomocni(i):=original(gdjeSmoUDrugomNizu)
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
push dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
pop dword [pomocni+4*ebx]
;gdjeSmoUDrugomNizu:=gdjeSmoUDrugomNizu+1
finit
fld dword [gdjeSmoUDrugomNizu]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [gdjeSmoUDrugomNizu]
;Else
finit
jmp l879780
l122896:
;pomocni(i):=original(gdjeSmoUPrvomNizu)
finit
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
push dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
pop dword [pomocni+4*ebx]
;gdjeSmoUPrvomNizu:=gdjeSmoUPrvomNizu+1
finit
fld dword [gdjeSmoUPrvomNizu]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [gdjeSmoUPrvomNizu]
;EndIf
finit
l879780:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [i]
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [brojac]
;EndWhile
finit
jmp l910971
l358446:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
push dword [result]
pop dword [i]
;While i<gornjaGranica
finit
l338464:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l586531
fld1
jmp l178469
l586531:
fldz
l178469:
fistp dword [result]
mov eax,[result]
test eax,eax
je l988560
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
push dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
pop dword [original+4*ebx]
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [brojac]
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [i]
;EndWhile
finit
jmp l338464
l988560:
;EndIf
finit
l530521:
;EndWhile
finit
jmp l279058
l271352:
;Inline assembly begins.
call [clock]
sub eax,[procesorskoVrijeme]
mov [procesorskoVrijeme],eax
if ispisPoruka=1
jmp sortiraniNizJe$
sortiraniNizJe db "Sortirani niz je:",10,0
sortiraniNizJe$:
staviStringNaSistemskiStog sortiraniNizJe
call [printf]
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
push dword [result]
pop dword [i]
;While i<n
finit
l350065:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l138532
fld1
jmp l927718
l138532:
fldz
l927718:
fistp dword [result]
mov eax,[result]
test eax,eax
je l249809
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;4
fld dword [result]
fld dword [i]
fmulp st1,st0
fstp dword [result]
push dword [result]
pop dword [pokazivac]
;Inline assembly begins.
lea ebx,[original]
fld dword [pokazivac]
fistp dword [pokazivac]
add ebx,[pokazivac]
fld dword [ebx]
fstp qword [esp]
staviStringNaSistemskiStog znakZaFloatPlusNoviRedPlusNulZnak
call [printf]
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [i]
;EndWhile
finit
jmp l350065
l249809:
;Inline assembly begins.
if ispisPoruka=1
staviIntNaSistemskiStog brojac
staviStringNaSistemskiStog unutrasnjaPetljaString
call [printf]
;Inline assembly ended.
;brojac:=2*n*ln(n)/ln(2)
finit
mov dword [result],0x40000000 ;2
fld dword [result]
fld dword [n]
fmulp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fmulp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fdivp st1,st0
fstp dword [result]
push dword [result]
pop dword [brojac]
;Inline assembly begins.
fld dword [brojac]
fstp qword [esp]
staviStringNaSistemskiStog slozenostString
call [printf]
push dword [procesorskoVrijeme]
invoke printf,sortiranjeJeTrajalo
invoke system,_pause
end if
invoke exit,0

_pause db "PAUSE",0
znakZaCijeliBrojBroj db "%d",0
znakZaNoviRedPlusNulZnak db 10,0
znakZaFloatPlusNoviRedPlusNulZnak db "%f",10,0
unutrasnjaPetljaString db "Unutrasnja petlja izvrsila se %d puta.",10,0
slozenostString db "Ocekivani broj ponavljanja te petlje, po formuli 2*n*log2(n), bio bi %.1f.",10,0
sortiranjeJeTrajalo db "Sortiranje je trajalo %d milisekundi.",10,0


section '.rdata' readable writable
original dd 32768*4 DUP(?)
n dd ?
result dd ?
brojac dd ?
pokazivac dd ?
i dd ?
stogSDonjimGranicama dd 32768*4 DUP(?)
stogSGornjimGranicama dd 32768*4 DUP(?)
stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove dd 32768*4 DUP(?)
pomocni dd 32768*4 DUP(?)
vrhStoga dd ?
donjaGranica dd ?
gornjaGranica dd ?
sredinaNiza dd ?
gdjeSmoUDrugomNizu dd ?
gdjeSmoUPrvomNizu dd ?
trebaLiSpajatiIliRazdvajati dd ?
procesorskoVrijeme dd ?

section '.idata' data readable import
library msvcrt,'msvcrt.dll'
import msvcrt,printf,'printf',system,'system',exit,'exit',scanf,'scanf',clock,'clock'
;Inline assembly ended.
