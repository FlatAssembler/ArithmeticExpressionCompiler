;Generated by Arithmetic Expression Compiler (https://flatassembler.github.io/compiler.html) run in Duktape.
;;Implementacija QuickSort-a.
;AsmStart ;Umetnuti Assembler pocinje ovako, a zavrsava sa "AsmEnd".
;Inline assembly begins.
ispisPoruka=1 ;Ovako se rade pretprocesorski definesovi u FlatAssembleru.
debug=0
macro staviIntNaSistemskiStog x ;Da, ima on mocan pretprocesor.
{
sub esp,4
fld dword [x]
fistp dword [esp]
}
macro staviPokazivacNaSistemskiStog x
{
sub esp,4
lea ebx,[x]
mov [esp],ebx
}
macro staviStringNaSistemskiStog x
{
sub esp,4
mov dword [esp],x
}
format PE console ; 'PE' je 32-bitna '.EXE' datoteka za Windows. 'PE64' je 64-bitna '.EXE' za Windows. 'MZ' je '.EXE' za DOS. 'ELF' je izvrsna datoteka za 32-bitni Linux, a 'ELF64' za 64-bitni.
entry start

include 'win32a.inc' ; Naredbe za komunikaciju s DLL-ovima.

section '.text' code executable
start:
if ispisPoruka=1 ; 'if' je ovdje assemblerska pretprocesorska naredba. 'If', s velikim 'i', je naredba grananja u AEC-u.
jmp velicinaUnosa$
velicinaUnosa db "Unesite koliko cete brojeva unijeti.",10,0
velicinaUnosa$:
staviStringNaSistemskiStog velicinaUnosa
call [printf]
end if
staviPokazivacNaSistemskiStog n
jmp znakZaFloat$
znakZaFloat db "%f",0
znakZaFloat$:
staviStringNaSistemskiStog znakZaFloat
call [scanf]
if ispisPoruka=1
jmp pitajZaUnos$
pitajZaUnos db "Unesite te brojeve:",10,0
pitajZaUnos$:
staviStringNaSistemskiStog pitajZaUnos
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;vrhStoga:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;While i<n
finit
WhileLabel97768:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel147258
fld1
jmp endOfTheLessThanComparisonLabel288792
secondOperandOfTheComparisonIsSmallerLabel147258:
fldz
endOfTheLessThanComparisonLabel288792:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel466207
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
fld dword [i]
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;AsmStart
;Inline assembly begins.
fld dword [pokazivac]
fistp dword [pokazivac]
lea ebx,[original]
add ebx,[pokazivac]
staviPokazivacNaSistemskiStog ebx
staviStringNaSistemskiStog znakZaFloat
call [scanf]
;AsmEnd
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel97768
EndWhileLabel466207:
;AsmStart
;Inline assembly begins.
call [clock]
mov [procesorskoVrijeme],eax
;AsmEnd
;Inline assembly ended.
;razvrstanost:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n-1
finit
WhileLabel161411:
fld dword [n]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fld dword [i]
fxch
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel989627
fld1
jmp endOfTheLessThanComparisonLabel808810
secondOperandOfTheComparisonIsSmallerLabel989627:
fldz
endOfTheLessThanComparisonLabel808810:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel590210
;razvrstanost:=razvrstanost+(original(i)<original(i+1))
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fxch
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel808558
fld1
jmp endOfTheLessThanComparisonLabel789464
secondOperandOfTheComparisonIsSmallerLabel808558:
fldz
endOfTheLessThanComparisonLabel789464:
fld dword [razvrstanost]
fxch
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel161411
EndWhileLabel590210:
;razvrstanost:=razvrstanost/((n-1)/2)-1
finit
fld dword [n]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fdivp
fld dword [razvrstanost]
fxch
fdivp
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=2
finit
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<7 | i=7 ;Kada nisam stavio operator "<=" u svoj jezik.
finit
WhileLabel944877:
fld dword [i]
mov dword [result],0x40e00000 ;IEEE754 hex of 7
fld dword [result]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel787163
fld1
jmp endOfTheLessThanComparisonLabel68611
secondOperandOfTheComparisonIsSmallerLabel787163:
fldz
endOfTheLessThanComparisonLabel68611:
fld dword [i]
mov dword [result],0x40e00000 ;IEEE754 hex of 7
fld dword [result]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel715154
fld1
jmp endOfTheEqualityOperatorLabel725416
operandsOfTheEqualityOperatorAreNotEqualLabel715154:
fldz
endOfTheEqualityOperatorLabel725416:
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
or dword [result],eax
fild dword [result]
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel18671
;razvrstanostNa(i):=pow(abs(razvrstanost),i) ;Zato sto je "pow(x,y)" u tom mom jeziku samo sintakticki secer za "exp(ln(x)*y)", i to vraca "NaN" za x<=0. Nema ocitog nacina da se "pow" prevede na Assembler.
finit
fld dword [razvrstanost]
fabs
fld dword [i]
fxch
fld1
fxch
fyl2x
fldl2e
fdivp
fmulp
fldl2e
fmulp
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp
fmulp
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [razvrstanostNa+4*ebx],edx
;If razvrstanost=0
finit
fld dword [razvrstanost]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel722204
fld1
jmp endOfTheEqualityOperatorLabel279087
operandsOfTheEqualityOperatorAreNotEqualLabel722204:
fldz
endOfTheEqualityOperatorLabel279087:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel44013
;razvrstanostNa(i):=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [razvrstanostNa+4*ebx],edx
;EndIf
finit
ElseLabel44013:
EndIfLabel262392:
;If mod(i,2)=1 & razvrstanost<0
finit
fld dword [i]
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel174650
fld1
jmp endOfTheEqualityOperatorLabel380555
operandsOfTheEqualityOperatorAreNotEqualLabel174650:
fldz
endOfTheEqualityOperatorLabel380555:
fld dword [razvrstanost]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel505499
fld1
jmp endOfTheLessThanComparisonLabel660858
secondOperandOfTheComparisonIsSmallerLabel505499:
fldz
endOfTheLessThanComparisonLabel660858:
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
and dword [result],eax
fild dword [result]
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel383841
;razvrstanostNa(i):=-razvrstanostNa(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fxch
fsubp
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [razvrstanostNa+4*ebx],edx
;EndIf
finit
ElseLabel383841:
EndIfLabel345255:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel944877
EndWhileLabel18671:
;;f(n,s)=exp((ln(n)+ln(ln(n)))*1.05+(ln(n)-ln(ln(n)))*0.83*abs(2.38854*pow(s,7)-0.284258*pow(s,6)-1.87104*pow(s,5)+0.372637*pow(s,4)+0.167242*pow(s,3)-0.0884977*pow(s,2)+0.315119*s))
;polinomPodApsolutnom:=2.38854*razvrstanostNa(7)-0.284258*razvrstanostNa(6)-1.87104*razvrstanostNa(5)+0.372637*razvrstanostNa(4)+0.167242*razvrstanostNa(3)-0.0884977*razvrstanostNa(2)+0.315119*razvrstanost
finit
mov dword [result],0x40e00000 ;IEEE754 hex of 7
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x4018ddd7 ;IEEE754 hex of 2.38854
fld dword [result]
fxch
fmulp
mov dword [result],0x40c00000 ;IEEE754 hex of 6
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3e918a44 ;IEEE754 hex of 0.284258
fld dword [result]
fxch
fmulp
fsubp
mov dword [result],0x40a00000 ;IEEE754 hex of 5
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3fef7e3d ;IEEE754 hex of 1.87104
fld dword [result]
fxch
fmulp
fsubp
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3ebeca47 ;IEEE754 hex of 0.372637
fld dword [result]
fxch
fmulp
faddp
mov dword [result],0x40400000 ;IEEE754 hex of 3
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3e2b417d ;IEEE754 hex of 0.167242
fld dword [result]
fxch
fmulp
faddp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3db53e48 ;IEEE754 hex of 0.0884977
fld dword [result]
fxch
fmulp
fsubp
mov dword [result],0x3ea15747 ;IEEE754 hex of 0.315119
fld dword [result]
fld dword [razvrstanost]
fmulp
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [polinomPodApsolutnom],edx
;eNaKoju:=(ln(n)+ln(ln(n)))*1.05+(ln(n)-ln(ln(n)))*0.83*abs(polinomPodApsolutnom)
finit
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fld1
fxch
fyl2x
fldl2e
fdivp
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fxch
fsubp
mov dword [result],0x3f547ae1 ;IEEE754 hex of 0.83
fld dword [result]
fmulp
fld dword [polinomPodApsolutnom]
fabs
fmulp
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fld1
fxch
fyl2x
fldl2e
fdivp
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fxch
faddp
mov dword [result],0x3f866666 ;IEEE754 hex of 1.05
fld dword [result]
fmulp
fxch
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [eNaKoju],edx
;ocekivaniBrojUsporedbi:=exp(eNaKoju)
finit
fld dword [eNaKoju]
fldl2e
fmulp
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [ocekivaniBrojUsporedbi],edx
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=1
finit
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;pomocniBrojac:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;While vrhStoga>0
finit
WhileLabel130050:
fld dword [vrhStoga]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterLabel731019
fld1
jmp endOfTheGreaterThanComparisonLabel77988
secondOperandOfTheComparisonIsGreaterLabel731019:
fldz
endOfTheGreaterThanComparisonLabel77988:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel397511
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [donjaGranica],edx
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;gdjeJePivot:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeJePivot],edx
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
WhileLabel465875:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel713523
fld1
jmp endOfTheLessThanComparisonLabel412706
secondOperandOfTheComparisonIsSmallerLabel713523:
fldz
endOfTheLessThanComparisonLabel412706:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel18870
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel505856
fld1
jmp endOfTheLessThanComparisonLabel558624
secondOperandOfTheComparisonIsSmallerLabel505856:
fldz
endOfTheLessThanComparisonLabel558624:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel215666
;gdjeJePivot:=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeJePivot],edx
;EndIf
finit
ElseLabel215666:
EndIfLabel232303:
;i:=i++
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel465875
EndWhileLabel18870:
;staviManje:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [staviManje],edx
;staviVece:=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [staviVece],edx
;pomocni(gdjeJePivot):=original(donjaGranica)
finit
fld dword [donjaGranica]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [gdjeJePivot]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
WhileLabel173143:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel215208
fld1
jmp endOfTheLessThanComparisonLabel462015
secondOperandOfTheComparisonIsSmallerLabel215208:
fldz
endOfTheLessThanComparisonLabel462015:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel135846
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel203029
fld1
jmp endOfTheLessThanComparisonLabel774523
secondOperandOfTheComparisonIsSmallerLabel203029:
fldz
endOfTheLessThanComparisonLabel774523:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel915276
;pomocni(staviManje):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [staviManje]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;staviManje:=staviManje+1
finit
fld dword [staviManje]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [staviManje],edx
;Else
finit
jmp EndIfLabel83778
ElseLabel915276:
;pomocni(staviVece):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [staviVece]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;staviVece:=staviVece+1
finit
fld dword [staviVece]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [staviVece],edx
;EndIf
finit
EndIfLabel83778:
;pomocniBrojac:=pomocniBrojac+1
finit
fld dword [pomocniBrojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;If pomocniBrojac=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac
finit
fld dword [pomocniBrojac]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel986692
fld1
jmp endOfTheEqualityOperatorLabel347029
operandsOfTheEqualityOperatorAreNotEqualLabel986692:
fldz
endOfTheEqualityOperatorLabel347029:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel816099
;brojac:=brojac+pomocniBrojac
finit
fld dword [brojac]
fld dword [pomocniBrojac]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;pomocniBrojac:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;EndIf
finit
ElseLabel816099:
EndIfLabel176013:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel173143
EndWhileLabel135846:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
WhileLabel697460:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel693856
fld1
jmp endOfTheLessThanComparisonLabel754640
secondOperandOfTheComparisonIsSmallerLabel693856:
fldz
endOfTheLessThanComparisonLabel754640:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel156956
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [original+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel697460
EndWhileLabel156956:
;If gdjeJePivot<gornjaGranica-1
finit
fld dword [gornjaGranica]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel938093
fld1
jmp endOfTheLessThanComparisonLabel524613
secondOperandOfTheComparisonIsSmallerLabel938093:
fldz
endOfTheLessThanComparisonLabel524613:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel110490
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
finit
ElseLabel110490:
EndIfLabel218109:
;If gdjeJePivot>donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterLabel873671
fld1
jmp endOfTheGreaterThanComparisonLabel940129
secondOperandOfTheComparisonIsGreaterLabel873671:
fldz
endOfTheGreaterThanComparisonLabel940129:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel98048
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gdjeJePivot
finit
fld dword [gdjeJePivot]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
finit
ElseLabel98048:
EndIfLabel378150:
;testZaPreljev:=brojac+najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac ;Potrebna je posebna varijabla za to jer FPU interno radi s 80-bitnim brojevima, a CPU s 32-bitnim.
finit
fld dword [brojac]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [testZaPreljev],edx
;If not(testZaPreljev>brojac)
finit
fld dword [testZaPreljev]
fld dword [brojac]
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterLabel313580
fld1
jmp endOfTheGreaterThanComparisonLabel883477
secondOperandOfTheComparisonIsGreaterLabel313580:
fldz
endOfTheGreaterThanComparisonLabel883477:
fld1
fxch
fsubp
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel217661
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac*2
finit
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceOpreljevu$
izvjesceOpreljevu db "Upozorenje: Brojac mozda nece sadrzavati tocan rezultat, dogodio se preljev na %d. iteraciji."
db " Najveca ocekivana pogreska za ovaj preljev je %d krivo prebrojanih izvrsavanja unutarnje petlje.",10,0
izvjesceOpreljevu$:
fld dword [n]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
fsubp
fabs
fistp dword [esp+4]
fld dword [brojac]
fistp dword [esp]
invoke printf,izvjesceOpreljevu
end if		
;AsmEnd
;Inline assembly ended.
;EndIf
finit
ElseLabel217661:
EndIfLabel95041:
;EndWhile
finit
jmp WhileLabel130050
EndWhileLabel397511:
;AsmStart
;Inline assembly begins.
call [clock]
sub eax,[procesorskoVrijeme]
mov [procesorskoVrijeme],eax
if ispisPoruka=1
jmp sortiraniNizJe$
sortiraniNizJe db "Sortirani niz je:",10,0
sortiraniNizJe$:
staviStringNaSistemskiStog sortiraniNizJe
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
WhileLabel542504:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel419506
fld1
jmp endOfTheLessThanComparisonLabel305415
secondOperandOfTheComparisonIsSmallerLabel419506:
fldz
endOfTheLessThanComparisonLabel305415:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel827246
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
fld dword [i]
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;AsmStart
;Inline assembly begins.
lea ebx,[original]
fld dword [pokazivac]
fistp dword [pokazivac]
add ebx,[pokazivac]
fld dword [ebx]
fstp qword [esp]
staviStringNaSistemskiStog znakZaFloatPlusNoviRedPlusNulZnak
call [printf]
;AsmEnd
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel542504
EndWhileLabel827246:
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
staviIntNaSistemskiStog brojac
staviStringNaSistemskiStog unutrasnjaPetljaString
call [printf]
;AsmEnd
;Inline assembly ended.
;brojac:=n*ln(n)/ln(2)
finit
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fld dword [n]
fxch
fmulp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp
fdivp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;AsmStart
;Inline assembly begins.
fld dword [brojac]
fstp qword [esp]
staviStringNaSistemskiStog slozenostString
call [printf]
push dword [procesorskoVrijeme]
invoke printf,sortiranjeJeTrajalo
fld dword [razvrstanost]
fstp qword [esp]
invoke printf,stringORazvrstanosti
fld dword [ocekivaniBrojUsporedbi]
fstp qword [esp+8] ;Zato sto "printf" iz MSVCRT-a za "%f" ocekuje 8-bajtni "double", i izgleda da ju nije moguce namjestiti da ocekuje 4-bajtni "float".
fld dword [eNaKoju]
fstp qword [esp]
invoke printf,izvjestajOFormuli
fld dword [polinomPodApsolutnom]
fstp qword [esp]
invoke printf,izvjestajOPolinomu
invoke system,_pause ;"Press any key to continue..."
end if
invoke exit,0

;Deklaracije konstanti.
_pause db "PAUSE",0
znakZaCijeliBrojBroj db "%d",0
znakZaNoviRedPlusNulZnak db 10,0
znakZaFloatPlusNoviRedPlusNulZnak db "%f",10,0
unutrasnjaPetljaString db "Unutrasnja petlja izvrsila se %d puta.",10,0
slozenostString db "Ocekivani broj ponavljanja te petlje, po formuli n*log2(n), bio bi %.1f.",10,0
sortiranjeJeTrajalo db "Sortiranje je trajalo %d milisekundi.",10,0
stringORazvrstanosti db "Razvrstanost pocetnog niza (s) iznosila je: %f",10,0
izvjestajOFormuli db "Ocekivani broj usporedbi, po formuli: ",10
db "exp((ln(n)+ln(ln(n)))*1.05+(ln(n)-ln(ln(n)))*0.83*abs(2.38854*pow(s,7)-0.284258*pow(s,6)-1.87104*pow(s,5)+0.372637*pow(s,4)+0.167242*pow(s,3)-0.0884977*pow(s,2)+0.315119*s))",10
db "bio bi: exp(%f)=%f",10,0
izvjestajOPolinomu:
if debug=1
db "Polinom pod apsolutnom vrijednosti iznosi: %f",10
end if
db 0

section '.rdata' readable writable ; Deklaracije varijabli.
original dd 32768*4 DUP(?)
n dd ?
result dd ?
brojac dd ?
pokazivac dd ?
i dd ?
stogSDonjimGranicama dd 32768*4 DUP(?)
stogSGornjimGranicama dd 32768*4 DUP(?)
pomocni dd 32768*4 DUP(?)
vrhStoga dd ?
donjaGranica dd ?
gornjaGranica dd ?
staviVece dd ?
staviManje dd ?
gdjeJePivot dd ?
procesorskoVrijeme dd ?
razvrstanost dd ?
razvrstanostNa dd 8 DUP(?)
polinomPodApsolutnom dd ?
eNaKoju dd ?
ocekivaniBrojUsporedbi dd ?
najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac dd ?
pomocniBrojac dd ?
testZaPreljev dd ?

section '.idata' data readable import ;Uvoz funkcija iz DLL-ova.
library msvcrt,'msvcrt.dll' ; "msvcrt.dll" je stara verzija Microsoft Visual C Runtime Libraryja dostupna u C:\Windows\System32\msvcrt.dll na Windows 95 i novijim.
import msvcrt,printf,'printf',system,'system',exit,'exit',scanf,'scanf',clock,'clock'
;AsmEnd
;Inline assembly ended.
