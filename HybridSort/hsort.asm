;Generated by Arithmetic Expression Compiler (http://flatassembler.000webhostapp.com/compiler.html) run in Duktape.
;;HybridSort algoritam - kombinacija QuickSort algoritma i MergeSort algoritma.
;Inline assembly begins.
ispisPoruka=1
macro staviIntNaSistemskiStog x
{
sub esp,4
fld dword [x]
fistp dword [esp]
}
macro staviPokazivacNaSistemskiStog x
{
sub esp,4
lea ebx,[x]
mov [esp],ebx
}
macro staviStringNaSistemskiStog x
{
sub esp,4
mov dword [esp],x
}
format PE console
entry start

include 'win32a.inc'

section '.text' code executable
start:
if ispisPoruka=1
jmp velicinaUnosa$
velicinaUnosa db "Unesite koliko cete brojeva unijeti.",10,0
velicinaUnosa$:
staviStringNaSistemskiStog velicinaUnosa
call [printf]
end if
staviPokazivacNaSistemskiStog n
jmp znakZaFloat$
znakZaFloat db "%f",0
znakZaFloat$:
staviStringNaSistemskiStog znakZaFloat
call [scanf]
if ispisPoruka=1
jmp pitajZaUnos$
pitajZaUnos db "Unesite te brojeve:",10,0
pitajZaUnos$:
staviStringNaSistemskiStog pitajZaUnos
call [printf]
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;vrhStoga:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;While i<n
finit
l763971:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l45068
fld1
jmp l396053
l45068:
fldz
l396053:
fistp dword [result]
mov eax,[result]
test eax,eax
je l979828
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;4
fld dword [result]
fld dword [i]
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;Inline assembly begins.
fld dword [pokazivac]
fistp dword [pokazivac]
lea ebx,[original]
add ebx,[pokazivac]
staviPokazivacNaSistemskiStog ebx
staviStringNaSistemskiStog znakZaFloat
call [scanf]
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l763971
l979828:
;Inline assembly begins.
call [clock]
mov [procesorskoVrijeme],eax
;Inline assembly ended.
;razvrstanost:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n-1
finit
l735085:
fld dword [n]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fld dword [i]
fxch
fcomip st1
fstp dword [result]
jna l594217
fld1
jmp l513705
l594217:
fldz
l513705:
fistp dword [result]
mov eax,[result]
test eax,eax
je l834850
;razvrstanost:=razvrstanost+(original(i)<original(i+1))
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fxch
fcomip st1
fstp dword [result]
jna l763949
fld1
jmp l96156
l763949:
fldz
l96156:
fld dword [razvrstanost]
fxch
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp l735085
l834850:
;razvrstanost:=razvrstanost/((n-1)/2)-1
finit
fld dword [n]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fdivp st1,st0
fld dword [razvrstanost]
fxch
fdivp st1,st0
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceORazvrstanosti$
izvjesceORazvrstanosti db "Razvrstanost pocetnog niza iznosi: %f",10,0
izvjesceORazvrstanosti$:
fld dword [razvrstanost]
fstp qword [esp]
staviStringNaSistemskiStog izvjesceORazvrstanosti
call [printf]
end if
;Inline assembly ended.
;i:=2
finit
mov dword [result],0x40000000 ;2
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<7 | i=7 
finit
l323450:
fld dword [i]
mov dword [result],0x40E00000 ;7
fld dword [result]
fcomip st1
fstp dword [result]
jna l990036
fld1
jmp l489567
l990036:
fldz
l489567:
fld dword [i]
mov dword [result],0x40E00000 ;7
fld dword [result]
fcomip st1
fstp dword [result]
jne l136247
fld1
jmp l305221
l136247:
fldz
l305221:
fistp dword [result]
mov eax,[result]
fistp dword [result]
or [result],eax
fild dword [result]
fistp dword [result]
mov eax,[result]
test eax,eax
je l200779
;razvrstanostNa(i):=pow(abs(razvrstanost),i)
finit
fld dword [razvrstanost]
fabs
fld dword [i]
fxch
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fmulp st1,st0
fldl2e
fmulp st1,st0
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp st1,st0
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [razvrstanostNa+4*ebx],edx
;If razvrstanost=0
finit
fld dword [razvrstanost]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jne l46118
fld1
jmp l625457
l46118:
fldz
l625457:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l344336
;razvrstanostNa(i):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [razvrstanostNa+4*ebx],edx
;EndIf
finit
l344336:
l248317:
;If mod(i,2)=1 & razvrstanost<0
finit
fld dword [i]
mov dword [result],0x40000000 ;2
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
mov dword [result],0x3F800000 ;1
fld dword [result]
fcomip st1
fstp dword [result]
jne l668223
fld1
jmp l686500
l668223:
fldz
l686500:
fld dword [razvrstanost]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jna l141367
fld1
jmp l985364
l141367:
fldz
l985364:
fistp dword [result]
mov eax,[result]
fistp dword [result]
and [result],eax
fild dword [result]
fistp dword [result]
mov eax,[result]
test eax,eax
jz l212905
;razvrstanostNa(i):=-razvrstanostNa(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x0 ;0
fld dword [result]
fxch
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [razvrstanostNa+4*ebx],edx
;EndIf
finit
l212905:
l814250:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l323450
l200779:
;polinomPodApsolutnom:=2.38854*razvrstanostNa(7)-0.284258*razvrstanostNa(6)-1.87104*razvrstanostNa(5)+0.372637*razvrstanostNa(4)+0.167242*razvrstanostNa(3)-0.0884977*razvrstanostNa(2)+0.315119*razvrstanost
finit
mov dword [result],0x40E00000 ;7
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x4018DDD7 ;2.38854
fld dword [result]
fxch
fmulp st1,st0
mov dword [result],0x40C00000 ;6
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3E918A44 ;0.284258
fld dword [result]
fxch
fmulp st1,st0
fsubp st1,st0
mov dword [result],0x40A00000 ;5
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3FEF7E3D ;1.87104
fld dword [result]
fxch
fmulp st1,st0
fsubp st1,st0
mov dword [result],0x40800000 ;4
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3EBECA47 ;0.372637
fld dword [result]
fxch
fmulp st1,st0
faddp st1,st0
mov dword [result],0x40400000 ;3
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3E2B417D ;0.167242
fld dword [result]
fxch
fmulp st1,st0
faddp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3DB53E48 ;0.0884977
fld dword [result]
fxch
fmulp st1,st0
fsubp st1,st0
mov dword [result],0x3EA15747 ;0.315119
fld dword [result]
fld dword [razvrstanost]
fmulp st1,st0
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [polinomPodApsolutnom],edx
;eNaKoju:=(ln(n)+ln(ln(n)))*1.05+(ln(n)-ln(ln(n)))*0.83*abs(polinomPodApsolutnom)
finit
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fxch
fsubp st1,st0
mov dword [result],0x3F547AE1 ;0.83
fld dword [result]
fmulp st1,st0
fld dword [polinomPodApsolutnom]
fabs
fmulp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fxch
faddp st1,st0
mov dword [result],0x3F866666 ;1.05
fld dword [result]
fmulp st1,st0
fxch
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [eNaKoju],edx
;ocekivaniBrojUsporedbi:=exp(eNaKoju)
finit
fld dword [eNaKoju]
fldl2e
fmulp st1,st0
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp st1,st0
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [ocekivaniBrojUsporedbi],edx
;ocekivanoOdMergeSorta:=2*n*ln(n)/ln(2)
finit
mov dword [result],0x40000000 ;2
fld dword [result]
fld dword [n]
fmulp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fmulp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fdivp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [ocekivanoOdMergeSorta],edx
;Inline assembly begins.
if ispisPoruka=1
jmp ispisOTomeStoOcekujemo$
ispisOTomeStoOcekujemo db "Od QuickSorta ocekujemo %f usporedbi, a od MergeSorta ocekujemo %f usporedbi.",10,0
ispisOTomeStoOcekujemo$:
fld dword [ocekivanoOdMergeSorta]
fstp qword [esp+8]
fld dword [ocekivaniBrojUsporedbi]
fstp qword [esp]
staviStringNaSistemskiStog ispisOTomeStoOcekujemo
call [printf]
end if
;Inline assembly ended.
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=1
finit
mov dword [result],0x3F800000 ;1
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;pomocniBrojac:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;If razvrstanost=1
finit
fld dword [razvrstanost]
mov dword [result],0x3F800000 ;1
fld dword [result]
fcomip st1
fstp dword [result]
jne l415976
fld1
jmp l470329
l415976:
fldz
l470329:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l127852
;Inline assembly begins.
if ispisPoruka=1
jmp nizJeVecRazvrstan$
nizJeVecRazvrstan db "Niz je vec poredan, ne radimo nista.",10,0
nizJeVecRazvrstan$:
invoke printf,nizJeVecRazvrstan
end if
;Inline assembly ended.
;ElseIf razvrstanost=(-1)
finit
jmp l73196
l127852:
mov dword [result],0x0 ;0
fld dword [result]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fld dword [razvrstanost]
fxch
fcomip st1
fstp dword [result]
jne l264018
fld1
jmp l243393
l264018:
fldz
l243393:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l538352
;Inline assembly begins.
if ispisPoruka=1
jmp nizJeObrnutoRazvrstan$
nizJeObrnutoRazvrstan db "Niz je obrnuto poredan.",10,0
nizJeObrnutoRazvrstan$:
invoke printf,nizJeObrnutoRazvrstan
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
l703195:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l672355
fld1
jmp l148433
l672355:
fldz
l148433:
fistp dword [result]
mov eax,[result]
test eax,eax
je l593245
;pomocni(i):=original(n-i-1)
finit
fld dword [n]
fld dword [i]
fsubp st1,st0
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp l703195
l593245:
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
l546810:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l528881
fld1
jmp l426837
l528881:
fldz
l426837:
fistp dword [result]
mov eax,[result]
test eax,eax
je l543858
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [original+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l546810
l543858:
;ElseIf ocekivaniBrojUsporedbi<ocekivanoOdMergeSorta
finit
jmp l73196
l538352:
fld dword [ocekivaniBrojUsporedbi]
fld dword [ocekivanoOdMergeSorta]
fcomip st1
fstp dword [result]
jna l990667
fld1
jmp l953872
l990667:
fldz
l953872:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l681917
;Inline assembly begins.
if ispisPoruka=1
jmp radimoQuickSort$
radimoQuickSort db "Primijenit cemo QuickSort algoritam.",10,0
radimoQuickSort$:
invoke printf,radimoQuickSort
end if
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;While vrhStoga>0
finit
l770624:
fld dword [vrhStoga]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jnb l737571
fld1
jmp l763851
l737571:
fldz
l763851:
fistp dword [result]
mov eax,[result]
test eax,eax
je l327131
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [donjaGranica],edx
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;gdjeJePivot:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeJePivot],edx
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
l523701:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l667433
fld1
jmp l455648
l667433:
fldz
l455648:
fistp dword [result]
mov eax,[result]
test eax,eax
je l903319
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna l833948
fld1
jmp l111551
l833948:
fldz
l111551:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l905277
;gdjeJePivot:=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeJePivot],edx
;EndIf
finit
l905277:
l831011:
;i:=i++
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l523701
l903319:
;staviManje:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [staviManje],edx
;staviVece:=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [staviVece],edx
;pomocni(gdjeJePivot):=original(donjaGranica)
finit
fld dword [donjaGranica]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [gdjeJePivot]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
l488516:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l223612
fld1
jmp l413387
l223612:
fldz
l413387:
fistp dword [result]
mov eax,[result]
test eax,eax
je l158745
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna l585479
fld1
jmp l925827
l585479:
fldz
l925827:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l34253
;pomocni(staviManje):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [staviManje]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;staviManje:=staviManje+1
finit
fld dword [staviManje]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [staviManje],edx
;Else
finit
jmp l513892
l34253:
;pomocni(staviVece):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [staviVece]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;staviVece:=staviVece+1
finit
fld dword [staviVece]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [staviVece],edx
;EndIf
finit
l513892:
;pomocniBrojac:=pomocniBrojac+1
finit
fld dword [pomocniBrojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;If pomocniBrojac=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac
finit
fld dword [pomocniBrojac]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
fcomip st1
fstp dword [result]
jne l150745
fld1
jmp l662536
l150745:
fldz
l662536:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l562714
;brojac:=brojac+pomocniBrojac
finit
fld dword [brojac]
fld dword [pomocniBrojac]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;pomocniBrojac:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;EndIf
finit
l562714:
l185593:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l488516
l158745:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
l593768:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l36503
fld1
jmp l372192
l36503:
fldz
l372192:
fistp dword [result]
mov eax,[result]
test eax,eax
je l199140
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [original+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l593768
l199140:
;If gdjeJePivot<gornjaGranica-1
finit
fld dword [gornjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jna l113739
fld1
jmp l898640
l113739:
fldz
l898640:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l646793
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
finit
l646793:
l889842:
;If gdjeJePivot>donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jnb l502151
fld1
jmp l407267
l502151:
fldz
l407267:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l269520
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gdjeJePivot
finit
fld dword [gdjeJePivot]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
finit
l269520:
l310150:
;testZaPreljev:=brojac+najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac ;Potrebna je posebna varijabla za to jer FPU interno radi s 80-bitnim brojevima, a CPU s 32-bitnim.
finit
fld dword [brojac]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [testZaPreljev],edx
;If not(testZaPreljev>brojac)
finit
fld dword [testZaPreljev]
fld dword [brojac]
fcomip st1
fstp dword [result]
jnb l207179
fld1
jmp l384880
l207179:
fldz
l384880:
fld1
fxch
fsubp st1,st0
fistp dword [result]
mov eax,[result]
test eax,eax
jz l760256
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac*2
finit
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
mov dword [result],0x40000000 ;2
fld dword [result]
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceOpreljevu$
izvjesceOpreljevu db "Upozorenje: Brojac mozda nece sadrzavati tocan rezultat, dogodio se preljev na %d. iteraciji."
db " Najveca ocekivana pogreska za ovaj preljev je %d krivo prebrojanih izvrsavanja unutarnje petlje.",10,0
izvjesceOpreljevu$:
fld dword [n]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
fsubp
fabs
fistp dword [esp+4]
fld dword [brojac]
fistp dword [esp]
invoke printf,izvjesceOpreljevu
end if      
;Inline assembly ended.
;EndIf
finit
l760256:
l547482:
;EndWhile
finit
jmp l770624
l327131:
;Else
finit
jmp l73196
l681917:
;Inline assembly begins.
if ispisPoruka=1
jmp radimoMergeSort$
radimoMergeSort db "Primijenit cemo MergeSort algoritam.",10,0
radimoMergeSort$:
invoke printf,radimoMergeSort
end if
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;While vrhStoga>0
finit
l155571:
fld dword [vrhStoga]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jnb l25627
fld1
jmp l195109
l25627:
fldz
l195109:
fistp dword [result]
mov eax,[result]
test eax,eax
je l810623
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [donjaGranica],edx
;trebaLiSpajatiIliRazdvajati:=stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [trebaLiSpajatiIliRazdvajati],edx
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;sredinaNiza:=(donjaGranica+gornjaGranica)/2
finit
fld dword [donjaGranica]
fld dword [gornjaGranica]
faddp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fdivp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [sredinaNiza],edx
;sredinaNiza:=sredinaNiza-mod(sredinaNiza,1)
finit
fld dword [sredinaNiza]
mov dword [result],0x3F800000 ;1
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
fld dword [sredinaNiza]
fxch
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [sredinaNiza],edx
;If trebaLiSpajatiIliRazdvajati=0
finit
fld dword [trebaLiSpajatiIliRazdvajati]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jne l869831
fld1
jmp l783787
l869831:
fldz
l783787:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l430000
;If gornjaGranica-donjaGranica>1
finit
fld dword [gornjaGranica]
fld dword [donjaGranica]
fsubp st1,st0
mov dword [result],0x3F800000 ;1
fld dword [result]
fcomip st1
fstp dword [result]
jnb l929248
fld1
jmp l839230
l929248:
fldz
l839230:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l409057
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=1
finit
mov dword [result],0x3F800000 ;1
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;EndIf
finit
l409057:
l422277:
;Else
finit
jmp l258840
l430000:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;gdjeSmoUPrvomNizu:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUPrvomNizu],edx
;gdjeSmoUDrugomNizu:=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUDrugomNizu],edx
;While i<gornjaGranica
finit
l866374:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l506879
fld1
jmp l554800
l506879:
fldz
l554800:
fistp dword [result]
mov eax,[result]
test eax,eax
je l715301
;If (gdjeSmoUPrvomNizu=sredinaNiza | original(gdjeSmoUDrugomNizu)<original(gdjeSmoUPrvomNizu)) & gdjeSmoUDrugomNizu<gornjaGranica
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna l246313
fld1
jmp l460352
l246313:
fldz
l460352:
fld dword [gdjeSmoUPrvomNizu]
fld dword [sredinaNiza]
fcomip st1
fstp dword [result]
jne l280312
fld1
jmp l70287
l280312:
fldz
l70287:
fxch
fistp dword [result]
mov eax,[result]
fistp dword [result]
or [result],eax
fild dword [result]
fld dword [gdjeSmoUDrugomNizu]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l63427
fld1
jmp l110288
l63427:
fldz
l110288:
fistp dword [result]
mov eax,[result]
fistp dword [result]
and [result],eax
fild dword [result]
fistp dword [result]
mov eax,[result]
test eax,eax
jz l447472
;pomocni(i):=original(gdjeSmoUDrugomNizu)
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;gdjeSmoUDrugomNizu:=gdjeSmoUDrugomNizu+1
finit
fld dword [gdjeSmoUDrugomNizu]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUDrugomNizu],edx
;Else
finit
jmp l72898
l447472:
;pomocni(i):=original(gdjeSmoUPrvomNizu)
finit
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;gdjeSmoUPrvomNizu:=gdjeSmoUPrvomNizu+1
finit
fld dword [gdjeSmoUPrvomNizu]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUPrvomNizu],edx
;EndIf
finit
l72898:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp l866374
l715301:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
l807678:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l762324
fld1
jmp l587924
l762324:
fldz
l587924:
fistp dword [result]
mov eax,[result]
test eax,eax
je l28866
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [original+4*ebx],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l807678
l28866:
;EndIf
finit
l258840:
;EndWhile
finit
jmp l155571
l810623:
;EndIf
finit
l73196:
;Inline assembly begins.
call [clock]
sub eax,[procesorskoVrijeme]
mov [procesorskoVrijeme],eax
if ispisPoruka=1
jmp sortiraniNizJe$
sortiraniNizJe db "Sortirani niz je:",10,0
sortiraniNizJe$:
staviStringNaSistemskiStog sortiraniNizJe
call [printf]
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
l679340:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l774109
fld1
jmp l931929
l774109:
fldz
l931929:
fistp dword [result]
mov eax,[result]
test eax,eax
je l442931
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;4
fld dword [result]
fld dword [i]
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;Inline assembly begins.
lea ebx,[original]
fld dword [pokazivac]
fistp dword [pokazivac]
add ebx,[pokazivac]
fld dword [ebx]
fstp qword [esp]
staviStringNaSistemskiStog znakZaFloatPlusNoviRedPlusNulZnak
call [printf]
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l679340
l442931:
;Inline assembly begins.
if ispisPoruka=1
staviIntNaSistemskiStog brojac
staviStringNaSistemskiStog unutrasnjaPetljaString
call [printf]
;Inline assembly ended.
;brojac:=n*ln(n)/ln(2)
finit
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld dword [n]
fxch
fmulp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fdivp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;Inline assembly begins.
fld dword [brojac]
fstp qword [esp]
staviStringNaSistemskiStog slozenostString
call [printf]
push dword [procesorskoVrijeme]
invoke printf,sortiranjeJeTrajalo
invoke system,_pause
end if
invoke exit,0

_pause db "PAUSE",0
znakZaCijeliBrojBroj db "%d",0
znakZaNoviRedPlusNulZnak db 10,0
znakZaFloatPlusNoviRedPlusNulZnak db "%f",10,0
unutrasnjaPetljaString db "Unutrasnja petlja izvrsila se %d puta.",10,0
slozenostString db "Ocekivani broj ponavljanja te petlje, po formuli n*log2(n), bio bi %.1f.",10,0
sortiranjeJeTrajalo db "Sortiranje je trajalo %d milisekundi.",10,0

section '.rdata' readable writable
original:
repeat 32768
dd 0
end repeat
n dd ?
result dd ?
brojac dd ?
pokazivac dd ?
i dd ?
stogSDonjimGranicama:
repeat 32768
dd 0
end repeat
stogSGornjimGranicama:
repeat 32768
dd 0
end repeat
pomocni:
repeat 32768
dd 0
end repeat
vrhStoga dd ?
donjaGranica dd ?
gornjaGranica dd ?
staviVece dd ?
staviManje dd ?
gdjeJePivot dd ?
procesorskoVrijeme dd ?
razvrstanost dd ?
razvrstanostNa dd 8 DUP(?)
polinomPodApsolutnom dd ?
eNaKoju dd ?
ocekivaniBrojUsporedbi dd ?
ocekivanoOdMergeSorta dd ?
najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac dd ?
pomocniBrojac dd ?
testZaPreljev dd ?
gdjeSmoUDrugomNizu dd ?
gdjeSmoUPrvomNizu dd ?
trebaLiSpajatiIliRazdvajati dd ?
sredinaNiza dd ?
stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove:
repeat 32768
dd 0
end repeat


section '.idata' data readable import
library msvcrt,'msvcrt.dll'
import msvcrt,printf,'printf',system,'system',exit,'exit',scanf,'scanf',clock,'clock'
;Inline assembly ended.
