;Generated by Arithmetic Expression Compiler (http://flatassembler.000webhostapp.com/compiler.html) run in Duktape.
;;Implementacija QuickSort-a.
;Inline assembly begins.
ispisPoruka=1 ;Ovako se rade pretprocesorski definesovi u FlatAssembleru.
macro staviIntNaSistemskiStog x ;Da, ima on mocan pretprocesor.
{
sub esp,4
fld dword [x]
fistp dword [esp]
}
macro staviPokazivacNaSistemskiStog x
{
sub esp,4
lea ebx,[x]
mov [esp],ebx
}
macro staviStringNaSistemskiStog x
{
sub esp,4
mov dword [esp],x
}
format PE console ; 'PE' je 32-bitna '.EXE' datoteka za Windows. 'PE64' je 64-bitna '.EXE' za Windows. 'MZ' je '.EXE' za DOS.
entry start

include 'win32a.inc' ; Naredbe za komunikaciju s DLL-ovima.

section '.text' code executable
start:
if ispisPoruka=1 ; 'if' je ovdje assemblerska pretprocesorska naredba. 'If', s velikim 'i', je naredba grananja u AEC-u.
jmp velicinaUnosa$
velicinaUnosa db "Unesite koliko cete brojeva unijeti.",10,0
velicinaUnosa$:
staviStringNaSistemskiStog velicinaUnosa
call [printf]
end if
staviPokazivacNaSistemskiStog n
jmp znakZaFloat$
znakZaFloat db "%f",0
znakZaFloat$:
staviStringNaSistemskiStog znakZaFloat
call [scanf]
if ispisPoruka=1
jmp pitajZaUnos$
pitajZaUnos db "Unesite te brojeve:",10,0
pitajZaUnos$:
staviStringNaSistemskiStog pitajZaUnos
call [printf]
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
push dword [result]
pop dword [i]
;vrhStoga:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
push dword [result]
pop dword [vrhStoga]
;While i<n
finit
l766261:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l334065
fld1
jmp l869553
l334065:
fldz
l869553:
fistp dword [result]
mov eax,[result]
test eax,eax
je l217212
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;4
fld dword [result]
fld dword [i]
fmulp st1,st0
fstp dword [result]
push dword [result]
pop dword [pokazivac]
;Inline assembly begins.
fld dword [pokazivac]
fistp dword [pokazivac]
lea ebx,[original]
add ebx,[pokazivac]
staviPokazivacNaSistemskiStog ebx
staviStringNaSistemskiStog znakZaFloat
call [scanf]
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [i]
;EndWhile
finit
jmp l766261
l217212:
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [vrhStoga]
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSDonjimGranicama+4*ebx]
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSGornjimGranicama+4*ebx]
;While vrhStoga>0
finit
l602526:
fld dword [vrhStoga]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jnb l931770
fld1
jmp l567501
l931770:
fldz
l567501:
fistp dword [result]
mov eax,[result]
test eax,eax
je l197429
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
push dword [result]
pop dword [gornjaGranica]
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
push dword [result]
pop dword [donjaGranica]
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fstp dword [result]
push dword [result]
pop dword [vrhStoga]
;gdjeJePivot:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
push dword [result]
pop dword [gdjeJePivot]
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [i]
;While i<gornjaGranica
finit
l229808:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l698216
fld1
jmp l98380
l698216:
fldz
l98380:
fistp dword [result]
mov eax,[result]
test eax,eax
je l201008
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna l811657
fld1
jmp l541556
l811657:
fldz
l541556:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l46916
;gdjeJePivot:=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [gdjeJePivot]
;EndIf
finit
l46916:
l696243:
;i:=i++
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [i]
;EndWhile
finit
jmp l229808
l201008:
;staviManje:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
push dword [result]
pop dword [staviManje]
;staviVece:=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [staviVece]
;pomocni(gdjeJePivot):=original(donjaGranica)
finit
fld dword [donjaGranica]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
push dword [result]
fld dword [gdjeJePivot]
fistp dword [result]
mov ebx,[result]
pop dword [pomocni+4*ebx]
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [i]
;While i<gornjaGranica
finit
l17638:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l874928
fld1
jmp l42179
l874928:
fldz
l42179:
fistp dword [result]
mov eax,[result]
test eax,eax
je l954933
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna l216132
fld1
jmp l356943
l216132:
fldz
l356943:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l111834
;pomocni(staviManje):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
push dword [result]
fld dword [staviManje]
fistp dword [result]
mov ebx,[result]
pop dword [pomocni+4*ebx]
;staviManje:=staviManje+1
finit
fld dword [staviManje]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [staviManje]
;Else
finit
jmp l175780
l111834:
;pomocni(staviVece):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
push dword [result]
fld dword [staviVece]
fistp dword [result]
mov ebx,[result]
pop dword [pomocni+4*ebx]
;staviVece:=staviVece+1
finit
fld dword [staviVece]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [staviVece]
;EndIf
finit
l175780:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [i]
;EndWhile
finit
jmp l17638
l954933:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
push dword [result]
pop dword [i]
;While i<gornjaGranica
finit
l677922:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l625373
fld1
jmp l911586
l625373:
fldz
l911586:
fistp dword [result]
mov eax,[result]
test eax,eax
je l443501
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
push dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
pop dword [original+4*ebx]
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [i]
;EndWhile
finit
jmp l677922
l443501:
;If gdjeJePivot<gornjaGranica-1
finit
fld dword [gornjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jna l964211
fld1
jmp l440662
l964211:
fldz
l440662:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l143053
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [vrhStoga]
;stogSDonjimGranicama(vrhStoga):=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSDonjimGranicama+4*ebx]
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSGornjimGranicama+4*ebx]
;EndIf
finit
l143053:
l53986:
;If gdjeJePivot>donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jnb l562085
fld1
jmp l716367
l562085:
fldz
l716367:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l527006
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [vrhStoga]
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSDonjimGranicama+4*ebx]
;stogSGornjimGranicama(vrhStoga):=gdjeJePivot
finit
fld dword [gdjeJePivot]
fstp dword [result]
push dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
pop dword [stogSGornjimGranicama+4*ebx]
;EndIf
finit
l527006:
l394871:
;EndWhile
finit
jmp l602526
l197429:
;Inline assembly begins.
if ispisPoruka=1
jmp sortiraniNizJe$
sortiraniNizJe db "Sortirani niz je:",10,0
sortiraniNizJe$:
staviStringNaSistemskiStog sortiraniNizJe
call [printf]
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
push dword [result]
pop dword [i]
;While i<n
finit
l835624:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l420825
fld1
jmp l856833
l420825:
fldz
l856833:
fistp dword [result]
mov eax,[result]
test eax,eax
je l490598
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;4
fld dword [result]
fld dword [i]
fmulp st1,st0
fstp dword [result]
push dword [result]
pop dword [pokazivac]
;Inline assembly begins.
lea ebx,[original]
fld dword [pokazivac]
fistp dword [pokazivac]
add ebx,[pokazivac]
fld dword [ebx]
fstp qword [esp]
staviStringNaSistemskiStog znakZaFloatPlusNoviRedPlusNulZnak
call [printf]
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
push dword [result]
pop dword [i]
;EndWhile
finit
jmp l835624
l490598:
;Inline assembly begins.
invoke system,_pause
invoke exit,0

_pause db "PAUSE",0
znakZaCijeliBroj db "%d",0
znakZaNoviRedPlusNulZnak db 10,0
znakZaFloatPlusNoviRedPlusNulZnak db "%f",10,0

section '.rdata' readable writable
original dd 32768*4 DUP(?)
n dd ?
result dd ?
pokazivac dd ?
i dd ?
stogSDonjimGranicama dd 32768*4 DUP(?)
stogSGornjimGranicama dd 32768*4 DUP(?)
pomocni dd 32768*4 DUP(?)
vrhStoga dd ?
donjaGranica dd ?
gornjaGranica dd ?
staviVece dd ?
staviManje dd ?
gdjeJePivot dd ?

section '.idata' data readable import
library msvcrt,'msvcrt.dll'
import msvcrt,printf,'printf',system,'system',exit,'exit',scanf,'scanf'
;Inline assembly ended.
