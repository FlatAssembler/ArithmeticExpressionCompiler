;Generated by Arithmetic Expression Compiler (https://flatassembler.github.io/compiler.html) run in Duktape.
;;HybridSort algoritam - kombinacija QuickSort algoritma i MergeSort algoritma.
;AsmStart
;Inline assembly begins.
ispisPoruka=1
macro staviIntNaSistemskiStog x ;"x" treba biti pokazivac na 32-bitni decimalni broj ("float"), kojeg ce ova makro-naredba pretvoriti u 32-bitni cijeli broj ("int") i staviti na sistemski stog.
{
sub esp,4
fld dword [x]
fistp dword [esp]
}
macro staviPokazivacNaSistemskiStog x
{
sub esp,4
lea ebx,[x]
mov [esp],ebx
}
macro staviStringNaSistemskiStog x
{
sub esp,4
mov dword [esp],x
}
format PE console ;"PE" je 32-bitna Windowsova ".EXE" datoteka (to nije sve sto FlatAssembler moze stvarati).
entry start

include 'win32a.inc' ;FlatAssemblerove naredbe za upravljanje DLL-ovima (ovdje se koriste za pozivanje C-ovih funkcija iz MSVCRT-a).

section '.text' code executable
start:
if ispisPoruka=1
jmp velicinaUnosa$
velicinaUnosa db "Unesite koliko cete brojeva unijeti.",10,0
velicinaUnosa$:
staviStringNaSistemskiStog velicinaUnosa
call [printf]
end if
staviPokazivacNaSistemskiStog n
jmp znakZaFloat$
znakZaFloat db "%f",0
znakZaFloat$:
staviStringNaSistemskiStog znakZaFloat
call [scanf]
if ispisPoruka=1
jmp pitajZaUnos$
pitajZaUnos db "Unesite te brojeve:",10,0
pitajZaUnos$:
staviStringNaSistemskiStog pitajZaUnos
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=0
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;brojac:=0
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [brojac],edx
;vrhStoga:=0
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [vrhStoga],edx
;While i<n
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel940646:
;Evaluating the expression after the "While" keyword
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "(< i n)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel611378
fld1
jmp endOfTheLessThanComparisonLabel386559
secondOperandOfTheComparisonIsSmallerOrEqualLabel611378:
fldz
endOfTheLessThanComparisonLabel386559:
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel815706
;pokazivac:=4*i ;"float" ima 4 bajta.
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "4" to the FPU stack...
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(* 4 i)" to the FPU stack...
fmulp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [pokazivac],edx
;AsmStart
;Inline assembly begins.
fld dword [pokazivac]
fistp dword [pokazivac]
lea ebx,[original]
add ebx,[pokazivac]
staviPokazivacNaSistemskiStog ebx
staviStringNaSistemskiStog znakZaFloat
call [scanf]
add esp,4+4 ;Pocisti sistemski stog nakon "scanf" (asemblerski jezik to ne radi automatski, kao sto rade visi jezici).
;AsmEnd
;Inline assembly ended.
;i:=i+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ i 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel940646
EndWhileLabel815706:
;AsmStart
;Inline assembly begins.
call [clock] ;"clock" na Windowsima vraca broj milisekundi otkad se program pokrenuo, zadnja 32 bita vraca u procesorski registar "eax".
mov [procesorskoVrijeme],eax
;AsmEnd
;Inline assembly ended.
;razvrstanost:=0
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [razvrstanost],edx
;i:=0
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;While i<n-1
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel335065:
;Evaluating the expression after the "While" keyword
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(- n 1)" to the FPU stack...
fsubp
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(< (- n 1) i)" to the FPU stack...
fxch
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel661922
fld1
jmp endOfTheLessThanComparisonLabel296934
secondOperandOfTheComparisonIsSmallerOrEqualLabel661922:
fldz
endOfTheLessThanComparisonLabel296934:
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel131635
;razvrstanost:=razvrstanost+(original(i)<original(i+1))
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ i 1)" to the FPU stack...
faddp
;Pushing "(original (+ i 1))" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(original i)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "(< (original (+ i 1)) (original i))" to the FPU stack...
fxch
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel917551
fld1
jmp endOfTheLessThanComparisonLabel116832
secondOperandOfTheComparisonIsSmallerOrEqualLabel917551:
fldz
endOfTheLessThanComparisonLabel116832:
;Pushing "razvrstanost" to the FPU stack...
fld dword [razvrstanost]
;Pushing "(+ (< (original (+ i 1)) (original i)) razvrstanost)" to the FPU stack...
fxch
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [razvrstanost],edx
;i:=i+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ i 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;brojac:=brojac+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "brojac" to the FPU stack...
fld dword [brojac]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ brojac 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [brojac],edx
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel335065
EndWhileLabel131635:
;razvrstanost:=razvrstanost/((n-1)/2)-1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(- n 1)" to the FPU stack...
fsubp
;Pushing "2" to the FPU stack...
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
;Pushing "(/ (- n 1) 2)" to the FPU stack...
fdivp
;Pushing "razvrstanost" to the FPU stack...
fld dword [razvrstanost]
;Pushing "(/ (/ (- n 1) 2) razvrstanost)" to the FPU stack...
fxch
fdivp
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(- (/ (/ (- n 1) 2) razvrstanost) 1)" to the FPU stack...
fsubp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [razvrstanost],edx
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceORazvrstanosti$
izvjesceORazvrstanosti db "Razvrstanost pocetnog niza iznosi: %f",10,0
izvjesceORazvrstanosti$:
fld dword [razvrstanost]
fstp qword [esp]
staviStringNaSistemskiStog izvjesceORazvrstanosti
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=2
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "2" to the FPU stack...
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;While i<7 | i=7 
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel864682:
;Evaluating the expression after the "While" keyword
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "7" to the FPU stack...
mov dword [result],0x40e00000 ;IEEE754 hex of 7
fld dword [result]
;Pushing "(< i 7)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel182461
fld1
jmp endOfTheLessThanComparisonLabel452690
secondOperandOfTheComparisonIsSmallerOrEqualLabel182461:
fldz
endOfTheLessThanComparisonLabel452690:
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "7" to the FPU stack...
mov dword [result],0x40e00000 ;IEEE754 hex of 7
fld dword [result]
;Pushing "(= i 7)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel564317
fld1
jmp endOfTheEqualityOperatorLabel702655
operandsOfTheEqualityOperatorAreNotEqualLabel564317:
fldz
endOfTheEqualityOperatorLabel702655:
;Pushing "(| (< i 7) (= i 7))" to the FPU stack...
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
or dword [result],eax
fild dword [result]
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel462272
;razvrstanostNa(i):=pow(abs(razvrstanost),i) ;"pow(x,y)" je u AEC-u samo sintaksni secer za "exp(ln(x)*y)", i to vraca NaN za x=0 ili x<0. Nema ocitog nacina da se "pow(x,y)" prevede na asemblerski.
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "razvrstanost" to the FPU stack...
fld dword [razvrstanost]
;Pushing "(abs razvrstanost)" to the FPU stack...
fabs
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(pow (abs razvrstanost) i)" to the FPU stack...
fxch
fld1
fxch
fyl2x
fldl2e
fdivp
fmulp
fldl2e
fmulp
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp
fmulp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "i" to the FPU stack...
fld dword [i]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [razvrstanostNa+4*ebx],edx
;razvrstanostNa(i):=(razvrstanost=0) ? 0 : (mod(i,2)=1 & razvrstanost<0) ? (-razvrstanostNa(i)) : razvrstanostNa(i) ;C-ov i JavaScriptin uvjetni operator nekad zna znatno skratiti kod, zato sam ga ugradio i u svoj jezik.
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(razvrstanostNa i)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(razvrstanostNa i)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Pushing "(- (razvrstanostNa i) 0)" to the FPU stack...
fxch
fsubp
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "2" to the FPU stack...
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
;Pushing "(mod i 2)" to the FPU stack...
fxch
fprem
fxch
fstp dword [result]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(= (mod i 2) 1)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel890890
fld1
jmp endOfTheEqualityOperatorLabel53894
operandsOfTheEqualityOperatorAreNotEqualLabel890890:
fldz
endOfTheEqualityOperatorLabel53894:
;Pushing "razvrstanost" to the FPU stack...
fld dword [razvrstanost]
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Pushing "(< razvrstanost 0)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel108817
fld1
jmp endOfTheLessThanComparisonLabel808532
secondOperandOfTheComparisonIsSmallerOrEqualLabel108817:
fldz
endOfTheLessThanComparisonLabel808532:
;Pushing "(& (= (mod i 2) 1) (< razvrstanost 0))" to the FPU stack...
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
and dword [result],eax
fild dword [result]
;Pushing "(?: (& (= (mod i 2) 1) (< razvrstanost 0)) (- (razvrstanostNa i) 0) (razvrstanostNa i))" to the FPU stack...
fistp dword [result]
xor eax,eax
cmp dword [result],eax
jz firstOperandOfTheTernaryOperatorIsZeroLabel239058
fstp dword [result]
mov eax, dword [result]
fstp dword [result]
mov dword [result],eax
fld dword [result]
jmp endOfTheTernaryOperatorLabel339758
firstOperandOfTheTernaryOperatorIsZeroLabel239058:
fstp dword [result]
endOfTheTernaryOperatorLabel339758:
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Pushing "razvrstanost" to the FPU stack...
fld dword [razvrstanost]
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Pushing "(= razvrstanost 0)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel166710
fld1
jmp endOfTheEqualityOperatorLabel851875
operandsOfTheEqualityOperatorAreNotEqualLabel166710:
fldz
endOfTheEqualityOperatorLabel851875:
;Pushing "(?: (= razvrstanost 0) 0 (?: (& (= (mod i 2) 1) (< razvrstanost 0)) (- (razvrstanostNa i) 0) (razvrstanostNa i)))" to the FPU stack...
fistp dword [result]
xor eax,eax
cmp dword [result],eax
jz firstOperandOfTheTernaryOperatorIsZeroLabel316069
fstp dword [result]
mov eax, dword [result]
fstp dword [result]
mov dword [result],eax
fld dword [result]
jmp endOfTheTernaryOperatorLabel70852
firstOperandOfTheTernaryOperatorIsZeroLabel316069:
fstp dword [result]
endOfTheTernaryOperatorLabel70852:
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "i" to the FPU stack...
fld dword [i]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [razvrstanostNa+4*ebx],edx
;i:=i+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ i 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel864682
EndWhileLabel462272:
;;Formula koju je ispisao genetski algoritam za predvidanje koliko ce usporedbi QuickSort napraviti: https://github.com/FlatAssembler/ArithmeticExpressionCompiler/tree/master/QuickSort/Genetic_algorithm_for_deriving_the_formula
;The entire line is a comment, moving on...
;polinomPodApsolutnom:=2.38854*razvrstanostNa(7) - 0.284258*razvrstanostNa(6) - 1.87104*razvrstanostNa(5) + 0.372637*razvrstanostNa(4) + 0.167242*razvrstanostNa(3) - 0.0884977*razvrstanostNa(2) + 0.315119*razvrstanost
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "7" to the FPU stack...
mov dword [result],0x40e00000 ;IEEE754 hex of 7
fld dword [result]
;Pushing "(razvrstanostNa 7)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "2.38854" to the FPU stack...
mov dword [result],0x4018ddd7 ;IEEE754 hex of 2.38854
fld dword [result]
;Pushing "(* (razvrstanostNa 7) 2.38854)" to the FPU stack...
fxch
fmulp
;Pushing "6" to the FPU stack...
mov dword [result],0x40c00000 ;IEEE754 hex of 6
fld dword [result]
;Pushing "(razvrstanostNa 6)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "0.284258" to the FPU stack...
mov dword [result],0x3e918a44 ;IEEE754 hex of 0.284258
fld dword [result]
;Pushing "(* (razvrstanostNa 6) 0.284258)" to the FPU stack...
fxch
fmulp
;Pushing "(- (* (razvrstanostNa 7) 2.38854) (* (razvrstanostNa 6) 0.284258))" to the FPU stack...
fsubp
;Pushing "5" to the FPU stack...
mov dword [result],0x40a00000 ;IEEE754 hex of 5
fld dword [result]
;Pushing "(razvrstanostNa 5)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "1.87104" to the FPU stack...
mov dword [result],0x3fef7e3d ;IEEE754 hex of 1.87104
fld dword [result]
;Pushing "(* (razvrstanostNa 5) 1.87104)" to the FPU stack...
fxch
fmulp
;Pushing "(- (- (* (razvrstanostNa 7) 2.38854) (* (razvrstanostNa 6) 0.284258)) (* (razvrstanostNa 5) 1.87104))" to the FPU stack...
fsubp
;Pushing "4" to the FPU stack...
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
;Pushing "(razvrstanostNa 4)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "0.372637" to the FPU stack...
mov dword [result],0x3ebeca47 ;IEEE754 hex of 0.372637
fld dword [result]
;Pushing "(* (razvrstanostNa 4) 0.372637)" to the FPU stack...
fxch
fmulp
;Pushing "(+ (- (- (* (razvrstanostNa 7) 2.38854) (* (razvrstanostNa 6) 0.284258)) (* (razvrstanostNa 5) 1.87104)) (* (razvrstanostNa 4) 0.372637))" to the FPU stack...
faddp
;Pushing "3" to the FPU stack...
mov dword [result],0x40400000 ;IEEE754 hex of 3
fld dword [result]
;Pushing "(razvrstanostNa 3)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "0.167242" to the FPU stack...
mov dword [result],0x3e2b417d ;IEEE754 hex of 0.167242
fld dword [result]
;Pushing "(* (razvrstanostNa 3) 0.167242)" to the FPU stack...
fxch
fmulp
;Pushing "(+ (+ (- (- (* (razvrstanostNa 7) 2.38854) (* (razvrstanostNa 6) 0.284258)) (* (razvrstanostNa 5) 1.87104)) (* (razvrstanostNa 4) 0.372637)) (* (razvrstanostNa 3) 0.167242))" to the FPU stack...
faddp
;Pushing "2" to the FPU stack...
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
;Pushing "(razvrstanostNa 2)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "0.0884977" to the FPU stack...
mov dword [result],0x3db53e48 ;IEEE754 hex of 0.0884977
fld dword [result]
;Pushing "(* (razvrstanostNa 2) 0.0884977)" to the FPU stack...
fxch
fmulp
;Pushing "(- (+ (+ (- (- (* (razvrstanostNa 7) 2.38854) (* (razvrstanostNa 6) 0.284258)) (* (razvrstanostNa 5) 1.87104)) (* (razvrstanostNa 4) 0.372637)) (* (razvrstanostNa 3) 0.167242)) (* (razvrstanostNa 2) 0.0884977))" to the FPU stack...
fsubp
;Pushing "0.315119" to the FPU stack...
mov dword [result],0x3ea15747 ;IEEE754 hex of 0.315119
fld dword [result]
;Pushing "razvrstanost" to the FPU stack...
fld dword [razvrstanost]
;Pushing "(* 0.315119 razvrstanost)" to the FPU stack...
fmulp
;Pushing "(+ (- (+ (+ (- (- (* (razvrstanostNa 7) 2.38854) (* (razvrstanostNa 6) 0.284258)) (* (razvrstanostNa 5) 1.87104)) (* (razvrstanostNa 4) 0.372637)) (* (razvrstanostNa 3) 0.167242)) (* (razvrstanostNa 2) 0.0884977)) (* 0.315119 razvrstanost))" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [polinomPodApsolutnom],edx
;eNaKoju:=(ln(n)+ln(ln(n)))*1.05+(ln(n)-ln(ln(n)))*0.83*abs(polinomPodApsolutnom)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "(ln n)" to the FPU stack...
fld1
fxch
fyl2x
fldl2e
fdivp
;Pushing "(ln (ln n))" to the FPU stack...
fld1
fxch
fyl2x
fldl2e
fdivp
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "(ln n)" to the FPU stack...
fld1
fxch
fyl2x
fldl2e
fdivp
;Pushing "(- (ln (ln n)) (ln n))" to the FPU stack...
fxch
fsubp
;Pushing "0.83" to the FPU stack...
mov dword [result],0x3f547ae1 ;IEEE754 hex of 0.83
fld dword [result]
;Pushing "(* (- (ln (ln n)) (ln n)) 0.83)" to the FPU stack...
fmulp
;Pushing "polinomPodApsolutnom" to the FPU stack...
fld dword [polinomPodApsolutnom]
;Pushing "(abs polinomPodApsolutnom)" to the FPU stack...
fabs
;Pushing "(* (* (- (ln (ln n)) (ln n)) 0.83) (abs polinomPodApsolutnom))" to the FPU stack...
fmulp
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "(ln n)" to the FPU stack...
fld1
fxch
fyl2x
fldl2e
fdivp
;Pushing "(ln (ln n))" to the FPU stack...
fld1
fxch
fyl2x
fldl2e
fdivp
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "(ln n)" to the FPU stack...
fld1
fxch
fyl2x
fldl2e
fdivp
;Pushing "(+ (ln (ln n)) (ln n))" to the FPU stack...
fxch
faddp
;Pushing "1.05" to the FPU stack...
mov dword [result],0x3f866666 ;IEEE754 hex of 1.05
fld dword [result]
;Pushing "(* (+ (ln (ln n)) (ln n)) 1.05)" to the FPU stack...
fmulp
;Pushing "(+ (* (* (- (ln (ln n)) (ln n)) 0.83) (abs polinomPodApsolutnom)) (* (+ (ln (ln n)) (ln n)) 1.05))" to the FPU stack...
fxch
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [eNaKoju],edx
;kolikoUsporedbiOcekujemoOdQuickSorta:=exp(eNaKoju)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "eNaKoju" to the FPU stack...
fld dword [eNaKoju]
;Pushing "(exp eNaKoju)" to the FPU stack...
fldl2e
fmulp
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp
fmulp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [kolikoUsporedbiOcekujemoOdQuickSorta],edx
;kolikoUsporedbiOcekujemoOdMergeSorta:=2*n*ln(n)/ln(2)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "2" to the FPU stack...
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "(* 2 n)" to the FPU stack...
fmulp
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "(ln n)" to the FPU stack...
fld1
fxch
fyl2x
fldl2e
fdivp
;Pushing "(* (* 2 n) (ln n))" to the FPU stack...
fmulp
;Pushing "2" to the FPU stack...
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
;Pushing "(ln 2)" to the FPU stack...
fld1
fxch
fyl2x
fldl2e
fdivp
;Pushing "(/ (* (* 2 n) (ln n)) (ln 2))" to the FPU stack...
fdivp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [kolikoUsporedbiOcekujemoOdMergeSorta],edx
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp ispisOTomeStoOcekujemo$
ispisOTomeStoOcekujemo db "Od QuickSorta ocekujemo %f usporedbi, a od MergeSorta ocekujemo %f usporedbi.",10,0
ispisOTomeStoOcekujemo$:
fld dword [kolikoUsporedbiOcekujemoOdMergeSorta]
fstp qword [esp+8]
fld dword [kolikoUsporedbiOcekujemoOdQuickSorta]
fstp qword [esp]
staviStringNaSistemskiStog ispisOTomeStoOcekujemo
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=1 ;Da, kada prijedemo MAX_SAFE_INTEGER za "float", ne pokusavamo vise dodavati jedinicu.
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;pomocniBrojac:=0
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [pomocniBrojac],edx
;If razvrstanost=1
;Initializing the FPU stack...
finit
;Type of the directive is: if-statement.
;Calculating the expression...
;Pushing "razvrstanost" to the FPU stack...
fld dword [razvrstanost]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(= razvrstanost 1)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel309157
fld1
jmp endOfTheEqualityOperatorLabel598717
operandsOfTheEqualityOperatorAreNotEqualLabel309157:
fldz
endOfTheEqualityOperatorLabel598717:
;Comparing the just-calculated expression with 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether the expression is 0...
jz ElseLabel308999
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp nizJeVecRazvrstan$
nizJeVecRazvrstan db "Niz je vec poredan, ne radimo nista.",10,0
nizJeVecRazvrstan$:
invoke printf,nizJeVecRazvrstan
end if
;AsmEnd
;Inline assembly ended.
;ElseIf razvrstanost=-1
;Initializing the FPU stack...
finit
;Type of the directive is: ElseIf-statement.
;If the expression in the If-statement evaluates to 1...
jmp EndIfLabel236546
;If it evaluates to 0...
ElseLabel308999:
;Evaluating the expression after the ElseIf keyword...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(- 0 1)" to the FPU stack...
fsubp
;Pushing "razvrstanost" to the FPU stack...
fld dword [razvrstanost]
;Pushing "(= (- 0 1) razvrstanost)" to the FPU stack...
fxch
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel675744
fld1
jmp endOfTheEqualityOperatorLabel803181
operandsOfTheEqualityOperatorAreNotEqualLabel675744:
fldz
endOfTheEqualityOperatorLabel803181:
;Comparing that expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it was 0...
jz ElseLabel344467
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp nizJeObrnutoRazvrstan$
nizJeObrnutoRazvrstan db "Niz je obrnuto poredan.",10,0
nizJeObrnutoRazvrstan$:
invoke printf,nizJeObrnutoRazvrstan
end if
;AsmEnd
;Inline assembly ended.
;i:=0
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;While i<n
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel217237:
;Evaluating the expression after the "While" keyword
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "(< i n)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel163978
fld1
jmp endOfTheLessThanComparisonLabel993485
secondOperandOfTheComparisonIsSmallerOrEqualLabel163978:
fldz
endOfTheLessThanComparisonLabel993485:
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel408070
;pomocni(i):=original(n-i-1)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(- n i)" to the FPU stack...
fsubp
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(- (- n i) 1)" to the FPU stack...
fsubp
;Pushing "(original (- (- n i) 1))" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "i" to the FPU stack...
fld dword [i]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [pomocni+4*ebx],edx
;i:=i+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ i 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;brojac:=brojac+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "brojac" to the FPU stack...
fld dword [brojac]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ brojac 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [brojac],edx
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel217237
EndWhileLabel408070:
;i:=0
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;While i<n
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel472480:
;Evaluating the expression after the "While" keyword
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "(< i n)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel499908
fld1
jmp endOfTheLessThanComparisonLabel333691
secondOperandOfTheComparisonIsSmallerOrEqualLabel499908:
fldz
endOfTheLessThanComparisonLabel333691:
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel125228
;original(i):=pomocni(i)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(pomocni i)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "i" to the FPU stack...
fld dword [i]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [original+4*ebx],edx
;i:=i+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ i 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel472480
EndWhileLabel125228:
;ElseIf kolikoUsporedbiOcekujemoOdQuickSorta<kolikoUsporedbiOcekujemoOdMergeSorta
;Initializing the FPU stack...
finit
;Type of the directive is: ElseIf-statement.
;If the expression in the If-statement evaluates to 1...
jmp EndIfLabel236546
;If it evaluates to 0...
ElseLabel344467:
;Evaluating the expression after the ElseIf keyword...
;Pushing "kolikoUsporedbiOcekujemoOdQuickSorta" to the FPU stack...
fld dword [kolikoUsporedbiOcekujemoOdQuickSorta]
;Pushing "kolikoUsporedbiOcekujemoOdMergeSorta" to the FPU stack...
fld dword [kolikoUsporedbiOcekujemoOdMergeSorta]
;Pushing "(< kolikoUsporedbiOcekujemoOdQuickSorta kolikoUsporedbiOcekujemoOdMergeSorta)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel356929
fld1
jmp endOfTheLessThanComparisonLabel884157
secondOperandOfTheComparisonIsSmallerOrEqualLabel356929:
fldz
endOfTheLessThanComparisonLabel884157:
;Comparing that expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it was 0...
jz ElseLabel683484
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp radimoQuickSort$
radimoQuickSort db "Primijenit cemo QuickSort algoritam.",10,0
radimoQuickSort$:
invoke printf,radimoQuickSort
end if
;AsmEnd
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ vrhStoga 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "n" to the FPU stack...
fld dword [n]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSGornjimGranicama+4*ebx],edx
;While vrhStoga>0
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel575889:
;Evaluating the expression after the "While" keyword
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Pushing "(> vrhStoga 0)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterOrEqualLabel339119
fld1
jmp endOfTheGreaterThanComparisonLabel300354
secondOperandOfTheComparisonIsGreaterOrEqualLabel339119:
fldz
endOfTheGreaterThanComparisonLabel300354:
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel852816
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "(stogSGornjimGranicama vrhStoga)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "(stogSDonjimGranicama vrhStoga)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [donjaGranica],edx
;vrhStoga:=vrhStoga-1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(- vrhStoga 1)" to the FPU stack...
fsubp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [vrhStoga],edx
;gdjeJePivot:=donjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [gdjeJePivot],edx
;i:=donjaGranica+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ donjaGranica 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;While i<gornjaGranica
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel605848:
;Evaluating the expression after the "While" keyword
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "gornjaGranica" to the FPU stack...
fld dword [gornjaGranica]
;Pushing "(< i gornjaGranica)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel692017
fld1
jmp endOfTheLessThanComparisonLabel394754
secondOperandOfTheComparisonIsSmallerOrEqualLabel692017:
fldz
endOfTheLessThanComparisonLabel394754:
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel337858
;If original(i)<original(donjaGranica)
;Initializing the FPU stack...
finit
;Type of the directive is: if-statement.
;Calculating the expression...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(original i)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Pushing "(original donjaGranica)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "(< (original i) (original donjaGranica))" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel282805
fld1
jmp endOfTheLessThanComparisonLabel542496
secondOperandOfTheComparisonIsSmallerOrEqualLabel282805:
fldz
endOfTheLessThanComparisonLabel542496:
;Comparing the just-calculated expression with 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether the expression is 0...
jz ElseLabel869805
;gdjeJePivot:=gdjeJePivot+1 ;Gdje ce doci element koji je sada prvi ("pivot").
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "gdjeJePivot" to the FPU stack...
fld dword [gdjeJePivot]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ gdjeJePivot 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [gdjeJePivot],edx
;EndIf
;Initializing the FPU stack...
finit
;Type of the directive is: EndIf-statement.
ElseLabel869805:
EndIfLabel247199:
;i:=i++ ;"++" je u AEC-u jednostavno sintaksni secer za "+1".
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ i 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel605848
EndWhileLabel337858:
;staviManje:=donjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [staviManje],edx
;staviVece:=gdjeJePivot+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "gdjeJePivot" to the FPU stack...
fld dword [gdjeJePivot]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ gdjeJePivot 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [staviVece],edx
;pomocni(gdjeJePivot):=original(donjaGranica)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Pushing "(original donjaGranica)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "gdjeJePivot" to the FPU stack...
fld dword [gdjeJePivot]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [pomocni+4*ebx],edx
;i:=donjaGranica+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ donjaGranica 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;While i<gornjaGranica ;Preuredi niz original(donjaGranica..gornjaGranica-1) tako da svi elementi koji su manji od onoga koji je bio prvi dodu prije njega.
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel289602:
;Evaluating the expression after the "While" keyword
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "gornjaGranica" to the FPU stack...
fld dword [gornjaGranica]
;Pushing "(< i gornjaGranica)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel947234
fld1
jmp endOfTheLessThanComparisonLabel299026
secondOperandOfTheComparisonIsSmallerOrEqualLabel947234:
fldz
endOfTheLessThanComparisonLabel299026:
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel822016
;If original(i)<original(donjaGranica)
;Initializing the FPU stack...
finit
;Type of the directive is: if-statement.
;Calculating the expression...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(original i)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Pushing "(original donjaGranica)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "(< (original i) (original donjaGranica))" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel626958
fld1
jmp endOfTheLessThanComparisonLabel456643
secondOperandOfTheComparisonIsSmallerOrEqualLabel626958:
fldz
endOfTheLessThanComparisonLabel456643:
;Comparing the just-calculated expression with 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether the expression is 0...
jz ElseLabel967543
;pomocni(staviManje):=original(i)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(original i)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "staviManje" to the FPU stack...
fld dword [staviManje]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [pomocni+4*ebx],edx
;staviManje:=staviManje+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "staviManje" to the FPU stack...
fld dword [staviManje]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ staviManje 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [staviManje],edx
;Else
;Initializing the FPU stack...
finit
;Type of the directive: Else-statement.
jmp EndIfLabel929036
ElseLabel967543:
;pomocni(staviVece):=original(i)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(original i)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "staviVece" to the FPU stack...
fld dword [staviVece]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [pomocni+4*ebx],edx
;staviVece:=staviVece+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "staviVece" to the FPU stack...
fld dword [staviVece]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ staviVece 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [staviVece],edx
;EndIf
;Initializing the FPU stack...
finit
;Type of the directive is: EndIf-statement.
EndIfLabel929036:
;pomocniBrojac:=pomocniBrojac+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "pomocniBrojac" to the FPU stack...
fld dword [pomocniBrojac]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ pomocniBrojac 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [pomocniBrojac],edx
;If pomocniBrojac=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac
;Initializing the FPU stack...
finit
;Type of the directive is: if-statement.
;Calculating the expression...
;Pushing "pomocniBrojac" to the FPU stack...
fld dword [pomocniBrojac]
;Pushing "najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac" to the FPU stack...
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
;Pushing "(= pomocniBrojac najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel71292
fld1
jmp endOfTheEqualityOperatorLabel228444
operandsOfTheEqualityOperatorAreNotEqualLabel71292:
fldz
endOfTheEqualityOperatorLabel228444:
;Comparing the just-calculated expression with 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether the expression is 0...
jz ElseLabel378033
;brojac:=brojac+pomocniBrojac
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "brojac" to the FPU stack...
fld dword [brojac]
;Pushing "pomocniBrojac" to the FPU stack...
fld dword [pomocniBrojac]
;Pushing "(+ brojac pomocniBrojac)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [brojac],edx
;pomocniBrojac:=0
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [pomocniBrojac],edx
;EndIf
;Initializing the FPU stack...
finit
;Type of the directive is: EndIf-statement.
ElseLabel378033:
EndIfLabel400407:
;i:=i+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ i 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel289602
EndWhileLabel822016:
;i:=donjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;While i<gornjaGranica
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel510617:
;Evaluating the expression after the "While" keyword
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "gornjaGranica" to the FPU stack...
fld dword [gornjaGranica]
;Pushing "(< i gornjaGranica)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel833472
fld1
jmp endOfTheLessThanComparisonLabel68937
secondOperandOfTheComparisonIsSmallerOrEqualLabel833472:
fldz
endOfTheLessThanComparisonLabel68937:
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel468996
;original(i):=pomocni(i)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(pomocni i)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "i" to the FPU stack...
fld dword [i]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [original+4*ebx],edx
;i:=i+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ i 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel510617
EndWhileLabel468996:
;;Razdvoji niz original(donjaGranica..gornjaGranica-1) na nizove original(donjaGranica..gdjeJePivot-1) i original(gdjeJePivot+1..gornjaGranica-1).
;The entire line is a comment, moving on...
;;Znamo gdje je pivot, pa njega ne trebamo ukljuciti ni u jedan od tih nizova.
;The entire line is a comment, moving on...
;;I ne trebamo na stog stavljati naputke o razvrstavanju nizova velicine 0 ili 1.
;The entire line is a comment, moving on...
;If gdjeJePivot<gornjaGranica-1
;Initializing the FPU stack...
finit
;Type of the directive is: if-statement.
;Calculating the expression...
;Pushing "gornjaGranica" to the FPU stack...
fld dword [gornjaGranica]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(- gornjaGranica 1)" to the FPU stack...
fsubp
;Pushing "gdjeJePivot" to the FPU stack...
fld dword [gdjeJePivot]
;Pushing "(< (- gornjaGranica 1) gdjeJePivot)" to the FPU stack...
fxch
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel499917
fld1
jmp endOfTheLessThanComparisonLabel60188
secondOperandOfTheComparisonIsSmallerOrEqualLabel499917:
fldz
endOfTheLessThanComparisonLabel60188:
;Comparing the just-calculated expression with 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether the expression is 0...
jz ElseLabel954520
;vrhStoga:=vrhStoga+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ vrhStoga 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=gdjeJePivot+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "gdjeJePivot" to the FPU stack...
fld dword [gdjeJePivot]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ gdjeJePivot 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "gornjaGranica" to the FPU stack...
fld dword [gornjaGranica]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
;Initializing the FPU stack...
finit
;Type of the directive is: EndIf-statement.
ElseLabel954520:
EndIfLabel295690:
;If gdjeJePivot>donjaGranica+1
;Initializing the FPU stack...
finit
;Type of the directive is: if-statement.
;Calculating the expression...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ donjaGranica 1)" to the FPU stack...
faddp
;Pushing "gdjeJePivot" to the FPU stack...
fld dword [gdjeJePivot]
;Pushing "(> (+ donjaGranica 1) gdjeJePivot)" to the FPU stack...
fxch
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterOrEqualLabel599390
fld1
jmp endOfTheGreaterThanComparisonLabel515614
secondOperandOfTheComparisonIsGreaterOrEqualLabel599390:
fldz
endOfTheGreaterThanComparisonLabel515614:
;Comparing the just-calculated expression with 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether the expression is 0...
jz ElseLabel669968
;vrhStoga:=vrhStoga+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ vrhStoga 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gdjeJePivot
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "gdjeJePivot" to the FPU stack...
fld dword [gdjeJePivot]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
;Initializing the FPU stack...
finit
;Type of the directive is: EndIf-statement.
ElseLabel669968:
EndIfLabel873145:
;testZaPreljev:=brojac+najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac ;Potrebna je posebna varijabla za to jer FPU interno radi s 80-bitnim brojevima, a CPU s 32-bitnim. Izgubio sam hrpu vremena da to shvatim.
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "brojac" to the FPU stack...
fld dword [brojac]
;Pushing "najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac" to the FPU stack...
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
;Pushing "(+ brojac najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [testZaPreljev],edx
;If not(testZaPreljev>brojac)
;Initializing the FPU stack...
finit
;Type of the directive is: if-statement.
;Calculating the expression...
;Pushing "testZaPreljev" to the FPU stack...
fld dword [testZaPreljev]
;Pushing "brojac" to the FPU stack...
fld dword [brojac]
;Pushing "(> testZaPreljev brojac)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterOrEqualLabel360011
fld1
jmp endOfTheGreaterThanComparisonLabel119006
secondOperandOfTheComparisonIsGreaterOrEqualLabel360011:
fldz
endOfTheGreaterThanComparisonLabel119006:
;Pushing "(not (> testZaPreljev brojac))" to the FPU stack...
fld1
fxch
fsubp
;Comparing the just-calculated expression with 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether the expression is 0...
jz ElseLabel205588
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac*2
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac" to the FPU stack...
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
;Pushing "2" to the FPU stack...
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
;Pushing "(* najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac 2)" to the FPU stack...
fmulp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceOpreljevu$
izvjesceOpreljevu db "Upozorenje: Brojac mozda nece sadrzavati tocan rezultat, dogodio se preljev na %d. iteraciji."
db " Najveca ocekivana pogreska za ovaj preljev je %d krivo prebrojanih izvrsavanja unutarnje petlje.",10,0
izvjesceOpreljevu$:
fld dword [gornjaGranica]
fld dword [donjaGranica]
fsubp
fabs
fistp dword [esp+4]
fld dword [brojac]
fistp dword [esp]
invoke printf,izvjesceOpreljevu
end if      
;AsmEnd
;Inline assembly ended.
;EndIf
;Initializing the FPU stack...
finit
;Type of the directive is: EndIf-statement.
ElseLabel205588:
EndIfLabel224153:
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel575889
EndWhileLabel852816:
;Else
;Initializing the FPU stack...
finit
;Type of the directive: Else-statement.
jmp EndIfLabel236546
ElseLabel683484:
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp radimoMergeSort$
radimoMergeSort db "Primijenit cemo MergeSort algoritam.",10,0
radimoMergeSort$:
invoke printf,radimoMergeSort
end if
;AsmEnd
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ vrhStoga 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "n" to the FPU stack...
fld dword [n]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "razdvajati" to the FPU stack...
fld dword [razdvajati]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;While vrhStoga>0
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel607248:
;Evaluating the expression after the "While" keyword
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Pushing "(> vrhStoga 0)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterOrEqualLabel231305
fld1
jmp endOfTheGreaterThanComparisonLabel688316
secondOperandOfTheComparisonIsGreaterOrEqualLabel231305:
fldz
endOfTheGreaterThanComparisonLabel688316:
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel836569
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "(stogSGornjimGranicama vrhStoga)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "(stogSDonjimGranicama vrhStoga)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [donjaGranica],edx
;trebaLiSpajatiIliRazdvajati:=stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "(stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove vrhStoga)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [trebaLiSpajatiIliRazdvajati],edx
;vrhStoga:=vrhStoga-1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(- vrhStoga 1)" to the FPU stack...
fsubp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [vrhStoga],edx
;sredinaNiza:=(donjaGranica+gornjaGranica)/2
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Pushing "gornjaGranica" to the FPU stack...
fld dword [gornjaGranica]
;Pushing "(+ donjaGranica gornjaGranica)" to the FPU stack...
faddp
;Pushing "2" to the FPU stack...
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
;Pushing "(/ (+ donjaGranica gornjaGranica) 2)" to the FPU stack...
fdivp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [sredinaNiza],edx
;sredinaNiza:=sredinaNiza-mod(sredinaNiza,1)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "sredinaNiza" to the FPU stack...
fld dword [sredinaNiza]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(mod sredinaNiza 1)" to the FPU stack...
fxch
fprem
fxch
fstp dword [result]
;Pushing "sredinaNiza" to the FPU stack...
fld dword [sredinaNiza]
;Pushing "(- (mod sredinaNiza 1) sredinaNiza)" to the FPU stack...
fxch
fsubp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [sredinaNiza],edx
;If trebaLiSpajatiIliRazdvajati=razdvajati ;Razdvoji niz original(donjaGranica..gornjaGranica-1) na original(donjaGranica..sredinaNiza-1) i original(sredinaNiza..gornjaGranica-1).
;Initializing the FPU stack...
finit
;Type of the directive is: if-statement.
;Calculating the expression...
;Pushing "trebaLiSpajatiIliRazdvajati" to the FPU stack...
fld dword [trebaLiSpajatiIliRazdvajati]
;Pushing "razdvajati" to the FPU stack...
fld dword [razdvajati]
;Pushing "(= trebaLiSpajatiIliRazdvajati razdvajati)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel379542
fld1
jmp endOfTheEqualityOperatorLabel71588
operandsOfTheEqualityOperatorAreNotEqualLabel379542:
fldz
endOfTheEqualityOperatorLabel71588:
;Comparing the just-calculated expression with 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether the expression is 0...
jz ElseLabel463972
;If gornjaGranica-donjaGranica>1 ;Niz velicine 0 ili 1 vec je poredan i ne radimo nista dalje.
;Initializing the FPU stack...
finit
;Type of the directive is: if-statement.
;Calculating the expression...
;Pushing "gornjaGranica" to the FPU stack...
fld dword [gornjaGranica]
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Pushing "(- gornjaGranica donjaGranica)" to the FPU stack...
fsubp
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(> (- gornjaGranica donjaGranica) 1)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterOrEqualLabel371199
fld1
jmp endOfTheGreaterThanComparisonLabel286789
secondOperandOfTheComparisonIsGreaterOrEqualLabel371199:
fldz
endOfTheGreaterThanComparisonLabel286789:
;Comparing the just-calculated expression with 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether the expression is 0...
jz ElseLabel638530
;vrhStoga:=vrhStoga+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ vrhStoga 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "gornjaGranica" to the FPU stack...
fld dword [gornjaGranica]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=spajati
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "spajati" to the FPU stack...
fld dword [spajati]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;;Stavljamo naputak za spajanje nizova prvog na stog kako bi on onda bio zadnji izvaden iz njega.
;The entire line is a comment, moving on...
;vrhStoga:=vrhStoga+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ vrhStoga 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=sredinaNiza
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "sredinaNiza" to the FPU stack...
fld dword [sredinaNiza]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "razdvajati" to the FPU stack...
fld dword [razdvajati]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;vrhStoga:=vrhStoga+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ vrhStoga 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=sredinaNiza
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "sredinaNiza" to the FPU stack...
fld dword [sredinaNiza]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "gornjaGranica" to the FPU stack...
fld dword [gornjaGranica]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "razdvajati" to the FPU stack...
fld dword [razdvajati]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "vrhStoga" to the FPU stack...
fld dword [vrhStoga]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;EndIf
;Initializing the FPU stack...
finit
;Type of the directive is: EndIf-statement.
ElseLabel638530:
EndIfLabel581416:
;Else ;Spoji vec poredane nizove original(donjaGranica..sredinaNiza-1) i original(sredinaNiza..gornjaGranica-1) u novi poredani niz original(donjaGranica..gornjaGranica-1).
;Initializing the FPU stack...
finit
;Type of the directive: Else-statement.
jmp EndIfLabel617893
ElseLabel463972:
;i:=donjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;gdjeSmoUPrvomNizu:=donjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [gdjeSmoUPrvomNizu],edx
;gdjeSmoUDrugomNizu:=sredinaNiza
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "sredinaNiza" to the FPU stack...
fld dword [sredinaNiza]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [gdjeSmoUDrugomNizu],edx
;While i<gornjaGranica
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel536289:
;Evaluating the expression after the "While" keyword
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "gornjaGranica" to the FPU stack...
fld dword [gornjaGranica]
;Pushing "(< i gornjaGranica)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel762479
fld1
jmp endOfTheLessThanComparisonLabel158483
secondOperandOfTheComparisonIsSmallerOrEqualLabel762479:
fldz
endOfTheLessThanComparisonLabel158483:
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel975699
;If (gdjeSmoUPrvomNizu=sredinaNiza | original(gdjeSmoUDrugomNizu)<original(gdjeSmoUPrvomNizu)) & gdjeSmoUDrugomNizu<gornjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: if-statement.
;Calculating the expression...
;Pushing "gdjeSmoUDrugomNizu" to the FPU stack...
fld dword [gdjeSmoUDrugomNizu]
;Pushing "(original gdjeSmoUDrugomNizu)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "gdjeSmoUPrvomNizu" to the FPU stack...
fld dword [gdjeSmoUPrvomNizu]
;Pushing "(original gdjeSmoUPrvomNizu)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Pushing "(< (original gdjeSmoUDrugomNizu) (original gdjeSmoUPrvomNizu))" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel758144
fld1
jmp endOfTheLessThanComparisonLabel429474
secondOperandOfTheComparisonIsSmallerOrEqualLabel758144:
fldz
endOfTheLessThanComparisonLabel429474:
;Pushing "gdjeSmoUPrvomNizu" to the FPU stack...
fld dword [gdjeSmoUPrvomNizu]
;Pushing "sredinaNiza" to the FPU stack...
fld dword [sredinaNiza]
;Pushing "(= gdjeSmoUPrvomNizu sredinaNiza)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel960997
fld1
jmp endOfTheEqualityOperatorLabel407248
operandsOfTheEqualityOperatorAreNotEqualLabel960997:
fldz
endOfTheEqualityOperatorLabel407248:
;Pushing "(| (< (original gdjeSmoUDrugomNizu) (original gdjeSmoUPrvomNizu)) (= gdjeSmoUPrvomNizu sredinaNiza))" to the FPU stack...
fxch
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
or dword [result],eax
fild dword [result]
;Pushing "gdjeSmoUDrugomNizu" to the FPU stack...
fld dword [gdjeSmoUDrugomNizu]
;Pushing "gornjaGranica" to the FPU stack...
fld dword [gornjaGranica]
;Pushing "(< gdjeSmoUDrugomNizu gornjaGranica)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel351033
fld1
jmp endOfTheLessThanComparisonLabel960015
secondOperandOfTheComparisonIsSmallerOrEqualLabel351033:
fldz
endOfTheLessThanComparisonLabel960015:
;Pushing "(& (| (< (original gdjeSmoUDrugomNizu) (original gdjeSmoUPrvomNizu)) (= gdjeSmoUPrvomNizu sredinaNiza)) (< gdjeSmoUDrugomNizu gornjaGranica))" to the FPU stack...
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
and dword [result],eax
fild dword [result]
;Comparing the just-calculated expression with 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether the expression is 0...
jz ElseLabel65916
;pomocni(i):=original(gdjeSmoUDrugomNizu)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "gdjeSmoUDrugomNizu" to the FPU stack...
fld dword [gdjeSmoUDrugomNizu]
;Pushing "(original gdjeSmoUDrugomNizu)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "i" to the FPU stack...
fld dword [i]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [pomocni+4*ebx],edx
;gdjeSmoUDrugomNizu:=gdjeSmoUDrugomNizu+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "gdjeSmoUDrugomNizu" to the FPU stack...
fld dword [gdjeSmoUDrugomNizu]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ gdjeSmoUDrugomNizu 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [gdjeSmoUDrugomNizu],edx
;Else
;Initializing the FPU stack...
finit
;Type of the directive: Else-statement.
jmp EndIfLabel935751
ElseLabel65916:
;pomocni(i):=original(gdjeSmoUPrvomNizu)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "gdjeSmoUPrvomNizu" to the FPU stack...
fld dword [gdjeSmoUPrvomNizu]
;Pushing "(original gdjeSmoUPrvomNizu)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "i" to the FPU stack...
fld dword [i]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [pomocni+4*ebx],edx
;gdjeSmoUPrvomNizu:=gdjeSmoUPrvomNizu+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "gdjeSmoUPrvomNizu" to the FPU stack...
fld dword [gdjeSmoUPrvomNizu]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ gdjeSmoUPrvomNizu 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [gdjeSmoUPrvomNizu],edx
;EndIf
;Initializing the FPU stack...
finit
;Type of the directive is: EndIf-statement.
EndIfLabel935751:
;i:=i+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ i 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;brojac:=brojac+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "brojac" to the FPU stack...
fld dword [brojac]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ brojac 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [brojac],edx
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel536289
EndWhileLabel975699:
;i:=donjaGranica
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "donjaGranica" to the FPU stack...
fld dword [donjaGranica]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;While i<gornjaGranica
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel206253:
;Evaluating the expression after the "While" keyword
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "gornjaGranica" to the FPU stack...
fld dword [gornjaGranica]
;Pushing "(< i gornjaGranica)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel301200
fld1
jmp endOfTheLessThanComparisonLabel721210
secondOperandOfTheComparisonIsSmallerOrEqualLabel301200:
fldz
endOfTheLessThanComparisonLabel721210:
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel535791
;original(i):=pomocni(i)
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(pomocni i)" to the FPU stack...
fistp dword [result]
mov ebx, dword [result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Calculating the l-value...
;Pushing "i" to the FPU stack...
fld dword [i]
;Moving the pointer from "st0" to "ebx".
fistp dword [result]
mov ebx, dword [result]
;Storing the r-value (now in "edx") where "ebx" points to.
mov dword [original+4*ebx],edx
;brojac:=brojac+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "brojac" to the FPU stack...
fld dword [brojac]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ brojac 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [brojac],edx
;i:=i+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ i 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel206253
EndWhileLabel535791:
;EndIf
;Initializing the FPU stack...
finit
;Type of the directive is: EndIf-statement.
EndIfLabel617893:
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel607248
EndWhileLabel836569:
;EndIf
;Initializing the FPU stack...
finit
;Type of the directive is: EndIf-statement.
EndIfLabel236546:
;AsmStart
;Inline assembly begins.
call [clock]
sub eax,[procesorskoVrijeme]
mov [procesorskoVrijeme],eax
if ispisPoruka=1
jmp sortiraniNizJe$
sortiraniNizJe db "Sortirani niz je:",10,0
sortiraniNizJe$:
staviStringNaSistemskiStog sortiraniNizJe
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=0
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "0" to the FPU stack...
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;While i<n
;Initializing the FPU stack...
finit
;Type of the directive: beginning of the while-loop
;Marking where the evaluation of the expression begins (because it needs to be repeated once we come to the end of the loop).
WhileLabel35696:
;Evaluating the expression after the "While" keyword
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "(< i n)" to the FPU stack...
fcomp
push ax
fstsw ax
mov al,ah
lahf
and ax,0xba45 ;https://www.vogons.org/viewtopic.php?p=1130827#p1130827
or ah,al
sahf
pop ax
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel45634
fld1
jmp endOfTheLessThanComparisonLabel32638
secondOperandOfTheComparisonIsSmallerOrEqualLabel45634:
fldz
endOfTheLessThanComparisonLabel32638:
;Comparing the expression to 0...
fistp dword [result]
mov eax, dword [result]
test eax,eax
;Branching based on whether it is 0...
je EndWhileLabel177358
;pokazivac:=4*i
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "4" to the FPU stack...
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "(* 4 i)" to the FPU stack...
fmulp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [pokazivac],edx
;AsmStart
;Inline assembly begins.
lea ebx,[original]
fld dword [pokazivac]
fistp dword [pokazivac]
add ebx,[pokazivac]
fld dword [ebx]
fstp qword [esp] ;"printf" za "%f" ocekuje "double", ili, u asemblerskoj terminologiji, "qword".
staviStringNaSistemskiStog znakZaFloatPlusNoviRedPlusNulZnak
call [printf]
;AsmEnd
;Inline assembly ended.
;i:=i+1
;Initializing the FPU stack...
finit
;Type of the directive is: assignment.
;Calculating the rvalue...
;Pushing "i" to the FPU stack...
fld dword [i]
;Pushing "1" to the FPU stack...
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
;Pushing "(+ i 1)" to the FPU stack...
faddp
;Storing the top of the FPU stack into "edx".
fstp dword [result]
mov edx, dword [result]
;Storing the r-value (now in "edx") into the variable.
mov dword [i],edx
;EndWhile
;Initializing the FPU stack...
finit
;Type of the directive: end of the while-loop.
jmp WhileLabel35696
EndWhileLabel177358:
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
staviIntNaSistemskiStog brojac
staviStringNaSistemskiStog unutrasnjaPetljaString
call [printf]
;AsmEnd
;Inline assembly ended.
;n*ln(n)/ln(2) ;Ovo ce se spremiti u "result", pomocnu varijablu koju koristi compiler za AEC.
;Initializing the FPU stack...
finit
;Type of the statement: unrecognized, passing it unchanged to "compiler.js".
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "(ln n)" to the FPU stack...
fld1
fxch
fyl2x
fldl2e
fdivp
;Pushing "n" to the FPU stack...
fld dword [n]
;Pushing "(* (ln n) n)" to the FPU stack...
fxch
fmulp
;Pushing "2" to the FPU stack...
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
;Pushing "(ln 2)" to the FPU stack...
fld1
fxch
fyl2x
fldl2e
fdivp
;Pushing "(/ (* (ln n) n) (ln 2))" to the FPU stack...
fdivp
;Storing the just-computed expression into "result"...
fstp dword [result]
;AsmStart
;Inline assembly begins.
fld dword [result]
fstp qword [esp] ;"printf" iz MSVCRT-a za "%f" ocekuje 64-bitni "double", ili, na asemblerskom jeziku, "qword".
staviStringNaSistemskiStog slozenostString
call [printf]
push dword [procesorskoVrijeme]
invoke printf,sortiranjeJeTrajalo
invoke system,_pause
end if
invoke exit,0

;"Konstante", ako njih pokusamo mijenjati, dobijemo Segmentation Fault:
_pause db "PAUSE",0
znakZaCijeliBrojBroj db "%d",0
znakZaNoviRedPlusNulZnak db 10,0
znakZaFloatPlusNoviRedPlusNulZnak db "%f",10,0
unutrasnjaPetljaString db "Unutrasnja petlja izvrsila se %d puta.",10,0
slozenostString db "Ocekivani broj ponavljanja te petlje, po formuli n*log2(n), bio bi %.1f.",10,0
sortiranjeJeTrajalo db "Sortiranje je trajalo %d milisekundi.",10,0
razdvajati dd 0f
spajati dd 1f

section '.rdata' readable writable ;Varijable i polja (u drugom segmentu programa nego sto je izvrsni dio).
original:
repeat 32768 ;Nije preporucljivo ovako na asemblerskom deklarirati nizove, ali zasto bih se pretvarao da radim za racunalom s 4 MB RAM-a, gdje je problem ucitati program gdje je jedan segment velik 640 KB?
dd 0
end repeat
n dd ?
result dd ?
brojac dd ?
pokazivac dd ?
i dd ?
stogSDonjimGranicama:
repeat 32768
dd 0
end repeat
stogSGornjimGranicama:
repeat 32768
dd 0
end repeat
pomocni:
repeat 32768
dd 0
end repeat
vrhStoga dd ?
donjaGranica dd ?
gornjaGranica dd ?
staviVece dd ?
staviManje dd ?
gdjeJePivot dd ?
procesorskoVrijeme dd ?
razvrstanost dd ?
razvrstanostNa dd 8 DUP(?)
polinomPodApsolutnom dd ?
eNaKoju dd ?
kolikoUsporedbiOcekujemoOdQuickSorta dd ?
kolikoUsporedbiOcekujemoOdMergeSorta dd ?
najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac dd ?
pomocniBrojac dd ?
testZaPreljev dd ?
gdjeSmoUDrugomNizu dd ?
gdjeSmoUPrvomNizu dd ?
trebaLiSpajatiIliRazdvajati dd ?
sredinaNiza dd ?
stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove:
repeat 32768
dd 0
end repeat


section '.idata' data readable import
library msvcrt,'msvcrt.dll' ;"msvcrt.dll" je Microsoft Visual C Runtime Library, dostupna u "C:\Windows\System32\msvcrt.dll" na Windows 98 i novijim.
import msvcrt,printf,'printf',system,'system',exit,'exit',scanf,'scanf',clock,'clock'
;AsmEnd
;Inline assembly ended.
