;Generated by Arithmetic Expression Compiler (https://flatassembler.github.io/compiler.html) run in Duktape.
;;HybridSort algoritam - kombinacija QuickSort algoritma i MergeSort algoritma.
;AsmStart
;Inline assembly begins.
ispisPoruka=1
macro staviIntNaSistemskiStog x ;"x" treba biti pokazivac na 32-bitni decimalni broj ("float"), kojeg ce ova makro-naredba pretvoriti u 32-bitni cijeli broj ("int") i staviti na sistemski stog.
{
sub esp,4
fld dword [x]
fistp dword [esp]
}
macro staviPokazivacNaSistemskiStog x
{
sub esp,4
lea ebx,[x]
mov [esp],ebx
}
macro staviStringNaSistemskiStog x
{
sub esp,4
mov dword [esp],x
}
format PE console ;"PE" je 32-bitna Windowsova ".EXE" datoteka (to nije sve sto FlatAssembler moze stvarati).
entry start

include 'win32a.inc' ;FlatAssemblerove naredbe za upravljanje DLL-ovima (ovdje se koriste za pozivanje C-ovih funkcija iz MSVCRT-a).

section '.text' code executable
start:
if ispisPoruka=1
jmp velicinaUnosa$
velicinaUnosa db "Unesite koliko cete brojeva unijeti.",10,0
velicinaUnosa$:
staviStringNaSistemskiStog velicinaUnosa
call [printf]
end if
staviPokazivacNaSistemskiStog n
jmp znakZaFloat$
znakZaFloat db "%f",0
znakZaFloat$:
staviStringNaSistemskiStog znakZaFloat
call [scanf]
if ispisPoruka=1
jmp pitajZaUnos$
pitajZaUnos db "Unesite te brojeve:",10,0
pitajZaUnos$:
staviStringNaSistemskiStog pitajZaUnos
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;vrhStoga:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;While i<n
finit
WhileLabel571597:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel983843
fld1
jmp endOfTheLessThanComparisonLabel402468
secondOperandOfTheComparisonIsSmallerLabel983843:
fldz
endOfTheLessThanComparisonLabel402468:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel950446
;pokazivac:=4*i ;"float" ima 4 bajta.
finit
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
fld dword [i]
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;AsmStart
;Inline assembly begins.
fld dword [pokazivac]
fistp dword [pokazivac]
lea ebx,[original]
add ebx,[pokazivac]
staviPokazivacNaSistemskiStog ebx
staviStringNaSistemskiStog znakZaFloat
call [scanf]
;AsmEnd
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel571597
EndWhileLabel950446:
;AsmStart
;Inline assembly begins.
call [clock] ;"clock" na Windowsima vraca broj milisekundi otkad se program pokrenuo, zadnja 32 bita vraca u procesorski registar "eax".
mov [procesorskoVrijeme],eax
;AsmEnd
;Inline assembly ended.
;razvrstanost:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n-1
finit
WhileLabel536479:
fld dword [n]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fld dword [i]
fxch
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel293483
fld1
jmp endOfTheLessThanComparisonLabel737323
secondOperandOfTheComparisonIsSmallerLabel293483:
fldz
endOfTheLessThanComparisonLabel737323:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel773646
;razvrstanost:=razvrstanost+(original(i)<original(i+1))
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fxch
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel798132
fld1
jmp endOfTheLessThanComparisonLabel360691
secondOperandOfTheComparisonIsSmallerLabel798132:
fldz
endOfTheLessThanComparisonLabel360691:
fld dword [razvrstanost]
fxch
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp WhileLabel536479
EndWhileLabel773646:
;razvrstanost:=razvrstanost/((n-1)/2)-1
finit
fld dword [n]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fdivp
fld dword [razvrstanost]
fxch
fdivp
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceORazvrstanosti$
izvjesceORazvrstanosti db "Razvrstanost pocetnog niza iznosi: %f",10,0
izvjesceORazvrstanosti$:
fld dword [razvrstanost]
fstp qword [esp]
staviStringNaSistemskiStog izvjesceORazvrstanosti
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=2
finit
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<7 | i=7 
finit
WhileLabel511942:
fld dword [i]
mov dword [result],0x40e00000 ;IEEE754 hex of 7
fld dword [result]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel443192
fld1
jmp endOfTheLessThanComparisonLabel180112
secondOperandOfTheComparisonIsSmallerLabel443192:
fldz
endOfTheLessThanComparisonLabel180112:
fld dword [i]
mov dword [result],0x40e00000 ;IEEE754 hex of 7
fld dword [result]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel501028
fld1
jmp endOfTheEqualityOperatorLabel398784
operandsOfTheEqualityOperatorAreNotEqualLabel501028:
fldz
endOfTheEqualityOperatorLabel398784:
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
or dword [result],eax
fild dword [result]
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel225587
;razvrstanostNa(i):=pow(abs(razvrstanost),i) ;"pow(x,y)" je u AEC-u samo sintaksni secer za "exp(ln(x)*y)", i to vraca NaN za x=0 ili x<0. Nema ocitog nacina da se "pow(x,y)" prevede na asemblerski.
finit
fld dword [razvrstanost]
fabs
fld dword [i]
fxch
fld1
fxch
fyl2x
fldl2e
fdivp
fmulp
fldl2e
fmulp
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp
fmulp
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [razvrstanostNa+4*ebx],edx
;If razvrstanost=0
finit
fld dword [razvrstanost]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel784013
fld1
jmp endOfTheEqualityOperatorLabel765539
operandsOfTheEqualityOperatorAreNotEqualLabel784013:
fldz
endOfTheEqualityOperatorLabel765539:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel84163
;razvrstanostNa(i):=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [razvrstanostNa+4*ebx],edx
;EndIf
finit
ElseLabel84163:
EndIfLabel55155:
;If mod(i,2)=1 & razvrstanost<0
finit
fld dword [i]
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel833633
fld1
jmp endOfTheEqualityOperatorLabel686059
operandsOfTheEqualityOperatorAreNotEqualLabel833633:
fldz
endOfTheEqualityOperatorLabel686059:
fld dword [razvrstanost]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel607462
fld1
jmp endOfTheLessThanComparisonLabel665542
secondOperandOfTheComparisonIsSmallerLabel607462:
fldz
endOfTheLessThanComparisonLabel665542:
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
and dword [result],eax
fild dword [result]
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel850559
;razvrstanostNa(i):=-razvrstanostNa(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fxch
fsubp
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [razvrstanostNa+4*ebx],edx
;EndIf
finit
ElseLabel850559:
EndIfLabel239114:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel511942
EndWhileLabel225587:
;;Formula koju je ispisao genetski algoritam za predvidanje koliko ce usporedbi QuickSort napraviti: https://github.com/FlatAssembler/ArithmeticExpressionCompiler/tree/master/QuickSort/Genetic_algorithm_for_deriving_the_formula
;polinomPodApsolutnom:=2.38854*razvrstanostNa(7)-0.284258*razvrstanostNa(6)-1.87104*razvrstanostNa(5)+0.372637*razvrstanostNa(4)+0.167242*razvrstanostNa(3)-0.0884977*razvrstanostNa(2)+0.315119*razvrstanost
finit
mov dword [result],0x40e00000 ;IEEE754 hex of 7
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x4018ddd7 ;IEEE754 hex of 2.38854
fld dword [result]
fxch
fmulp
mov dword [result],0x40c00000 ;IEEE754 hex of 6
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3e918a44 ;IEEE754 hex of 0.284258
fld dword [result]
fxch
fmulp
fsubp
mov dword [result],0x40a00000 ;IEEE754 hex of 5
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3fef7e3d ;IEEE754 hex of 1.87104
fld dword [result]
fxch
fmulp
fsubp
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3ebeca47 ;IEEE754 hex of 0.372637
fld dword [result]
fxch
fmulp
faddp
mov dword [result],0x40400000 ;IEEE754 hex of 3
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3e2b417d ;IEEE754 hex of 0.167242
fld dword [result]
fxch
fmulp
faddp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3db53e48 ;IEEE754 hex of 0.0884977
fld dword [result]
fxch
fmulp
fsubp
mov dword [result],0x3ea15747 ;IEEE754 hex of 0.315119
fld dword [result]
fld dword [razvrstanost]
fmulp
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [polinomPodApsolutnom],edx
;eNaKoju:=(ln(n)+ln(ln(n)))*1.05+(ln(n)-ln(ln(n)))*0.83*abs(polinomPodApsolutnom)
finit
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fld1
fxch
fyl2x
fldl2e
fdivp
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fxch
fsubp
mov dword [result],0x3f547ae1 ;IEEE754 hex of 0.83
fld dword [result]
fmulp
fld dword [polinomPodApsolutnom]
fabs
fmulp
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fld1
fxch
fyl2x
fldl2e
fdivp
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fxch
faddp
mov dword [result],0x3f866666 ;IEEE754 hex of 1.05
fld dword [result]
fmulp
fxch
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [eNaKoju],edx
;kolikoUsporedbiOcekujemoOdQuickSorta:=exp(eNaKoju)
finit
fld dword [eNaKoju]
fldl2e
fmulp
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [kolikoUsporedbiOcekujemoOdQuickSorta],edx
;kolikoUsporedbiOcekujemoOdMergeSorta:=2*n*ln(n)/ln(2)
finit
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fld dword [n]
fmulp
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fmulp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp
fdivp
fstp dword [result]
mov edx, dword [result]
mov dword [kolikoUsporedbiOcekujemoOdMergeSorta],edx
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp ispisOTomeStoOcekujemo$
ispisOTomeStoOcekujemo db "Od QuickSorta ocekujemo %f usporedbi, a od MergeSorta ocekujemo %f usporedbi.",10,0
ispisOTomeStoOcekujemo$:
fld dword [kolikoUsporedbiOcekujemoOdMergeSorta]
fstp qword [esp+8]
fld dword [kolikoUsporedbiOcekujemoOdQuickSorta]
fstp qword [esp]
staviStringNaSistemskiStog ispisOTomeStoOcekujemo
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=1 ;Da, kada prijedemo MAX_SAFE_INTEGER za "float", ne pokusavamo vise dodavati jedinicu.
finit
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;pomocniBrojac:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;If razvrstanost=1
finit
fld dword [razvrstanost]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel939432
fld1
jmp endOfTheEqualityOperatorLabel360959
operandsOfTheEqualityOperatorAreNotEqualLabel939432:
fldz
endOfTheEqualityOperatorLabel360959:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel692443
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp nizJeVecRazvrstan$
nizJeVecRazvrstan db "Niz je vec poredan, ne radimo nista.",10,0
nizJeVecRazvrstan$:
invoke printf,nizJeVecRazvrstan
end if
;AsmEnd
;Inline assembly ended.
;ElseIf razvrstanost=(-1) ;Da, parser od AEC-a jos nije savrsen i javlja gresku za "razvrstanost=-1".
finit
jmp EndIfLabel549889
ElseLabel692443:
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fld dword [razvrstanost]
fxch
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel432331
fld1
jmp endOfTheEqualityOperatorLabel381192
operandsOfTheEqualityOperatorAreNotEqualLabel432331:
fldz
endOfTheEqualityOperatorLabel381192:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel588589
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp nizJeObrnutoRazvrstan$
nizJeObrnutoRazvrstan db "Niz je obrnuto poredan.",10,0
nizJeObrnutoRazvrstan$:
invoke printf,nizJeObrnutoRazvrstan
end if
;AsmEnd
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
WhileLabel866615:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel955020
fld1
jmp endOfTheLessThanComparisonLabel859314
secondOperandOfTheComparisonIsSmallerLabel955020:
fldz
endOfTheLessThanComparisonLabel859314:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel230176
;pomocni(i):=original(n-i-1)
finit
fld dword [n]
fld dword [i]
fsubp
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp WhileLabel866615
EndWhileLabel230176:
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
WhileLabel899871:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel901932
fld1
jmp endOfTheLessThanComparisonLabel302602
secondOperandOfTheComparisonIsSmallerLabel901932:
fldz
endOfTheLessThanComparisonLabel302602:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel998393
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [original+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel899871
EndWhileLabel998393:
;ElseIf kolikoUsporedbiOcekujemoOdQuickSorta<kolikoUsporedbiOcekujemoOdMergeSorta
finit
jmp EndIfLabel549889
ElseLabel588589:
fld dword [kolikoUsporedbiOcekujemoOdQuickSorta]
fld dword [kolikoUsporedbiOcekujemoOdMergeSorta]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel308410
fld1
jmp endOfTheLessThanComparisonLabel492042
secondOperandOfTheComparisonIsSmallerLabel308410:
fldz
endOfTheLessThanComparisonLabel492042:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel931858
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp radimoQuickSort$
radimoQuickSort db "Primijenit cemo QuickSort algoritam.",10,0
radimoQuickSort$:
invoke printf,radimoQuickSort
end if
;AsmEnd
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;While vrhStoga>0
finit
WhileLabel378952:
fld dword [vrhStoga]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterLabel735397
fld1
jmp endOfTheGreaterThanComparisonLabel452888
secondOperandOfTheComparisonIsGreaterLabel735397:
fldz
endOfTheGreaterThanComparisonLabel452888:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel977146
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [donjaGranica],edx
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;gdjeJePivot:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeJePivot],edx
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
WhileLabel224312:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel991637
fld1
jmp endOfTheLessThanComparisonLabel920515
secondOperandOfTheComparisonIsSmallerLabel991637:
fldz
endOfTheLessThanComparisonLabel920515:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel991916
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel277563
fld1
jmp endOfTheLessThanComparisonLabel279350
secondOperandOfTheComparisonIsSmallerLabel277563:
fldz
endOfTheLessThanComparisonLabel279350:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel4268
;gdjeJePivot:=gdjeJePivot+1 ;Gdje ce doci element koji je sada prvi ("pivot").
finit
fld dword [gdjeJePivot]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeJePivot],edx
;EndIf
finit
ElseLabel4268:
EndIfLabel477181:
;i:=i++ ;"++" je u AEC-u jednostavno sintaksni secer za "+1".
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel224312
EndWhileLabel991916:
;staviManje:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [staviManje],edx
;staviVece:=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [staviVece],edx
;pomocni(gdjeJePivot):=original(donjaGranica)
finit
fld dword [donjaGranica]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [gdjeJePivot]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica ;Preuredi niz original(donjaGranica..gornjaGranica-1) tako da svi elementi koji su manji od onoga koji je bio prvi dodu prije njega.
finit
WhileLabel878476:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel339416
fld1
jmp endOfTheLessThanComparisonLabel808831
secondOperandOfTheComparisonIsSmallerLabel339416:
fldz
endOfTheLessThanComparisonLabel808831:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel353146
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel895407
fld1
jmp endOfTheLessThanComparisonLabel673646
secondOperandOfTheComparisonIsSmallerLabel895407:
fldz
endOfTheLessThanComparisonLabel673646:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel11354
;pomocni(staviManje):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [staviManje]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;staviManje:=staviManje+1
finit
fld dword [staviManje]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [staviManje],edx
;Else
finit
jmp EndIfLabel291005
ElseLabel11354:
;pomocni(staviVece):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [staviVece]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;staviVece:=staviVece+1
finit
fld dword [staviVece]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [staviVece],edx
;EndIf
finit
EndIfLabel291005:
;pomocniBrojac:=pomocniBrojac+1
finit
fld dword [pomocniBrojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;If pomocniBrojac=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac
finit
fld dword [pomocniBrojac]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel378381
fld1
jmp endOfTheEqualityOperatorLabel891343
operandsOfTheEqualityOperatorAreNotEqualLabel378381:
fldz
endOfTheEqualityOperatorLabel891343:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel472842
;brojac:=brojac+pomocniBrojac
finit
fld dword [brojac]
fld dword [pomocniBrojac]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;pomocniBrojac:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;EndIf
finit
ElseLabel472842:
EndIfLabel336586:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel878476
EndWhileLabel353146:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
WhileLabel687149:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel732181
fld1
jmp endOfTheLessThanComparisonLabel747498
secondOperandOfTheComparisonIsSmallerLabel732181:
fldz
endOfTheLessThanComparisonLabel747498:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel81543
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [original+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel687149
EndWhileLabel81543:
;;Razdvoji niz original(donjaGranica..gornjaGranica-1) na nizove original(donjaGranica..gdjeJePivot-1) i original(gdjeJePivot+1..gornjaGranica-1).
;;Znamo gdje je pivot, pa njega ne trebamo ukljuciti ni u jedan od tih nizova.
;;I ne trebamo na stog stavljati naputke o razvrstavanju nizova velicine 0 ili 1.
;If gdjeJePivot<gornjaGranica-1
finit
fld dword [gornjaGranica]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel786095
fld1
jmp endOfTheLessThanComparisonLabel446311
secondOperandOfTheComparisonIsSmallerLabel786095:
fldz
endOfTheLessThanComparisonLabel446311:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel695730
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
finit
ElseLabel695730:
EndIfLabel274798:
;If gdjeJePivot>donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterLabel949337
fld1
jmp endOfTheGreaterThanComparisonLabel811382
secondOperandOfTheComparisonIsGreaterLabel949337:
fldz
endOfTheGreaterThanComparisonLabel811382:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel894564
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gdjeJePivot
finit
fld dword [gdjeJePivot]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
finit
ElseLabel894564:
EndIfLabel598286:
;testZaPreljev:=brojac+najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac ;Potrebna je posebna varijabla za to jer FPU interno radi s 80-bitnim brojevima, a CPU s 32-bitnim. Izgubio sam hrpu vremena da to shvatim.
finit
fld dword [brojac]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [testZaPreljev],edx
;If not(testZaPreljev>brojac)
finit
fld dword [testZaPreljev]
fld dword [brojac]
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterLabel997103
fld1
jmp endOfTheGreaterThanComparisonLabel676436
secondOperandOfTheComparisonIsGreaterLabel997103:
fldz
endOfTheGreaterThanComparisonLabel676436:
fld1
fxch
fsubp
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel13239
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac*2
finit
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceOpreljevu$
izvjesceOpreljevu db "Upozorenje: Brojac mozda nece sadrzavati tocan rezultat, dogodio se preljev na %d. iteraciji."
db " Najveca ocekivana pogreska za ovaj preljev je %d krivo prebrojanih izvrsavanja unutarnje petlje.",10,0
izvjesceOpreljevu$:
fld dword [gornjaGranica]
fld dword [donjaGranica]
fsubp
fabs
fistp dword [esp+4]
fld dword [brojac]
fistp dword [esp]
invoke printf,izvjesceOpreljevu
end if      
;AsmEnd
;Inline assembly ended.
;EndIf
finit
ElseLabel13239:
EndIfLabel165290:
;EndWhile
finit
jmp WhileLabel378952
EndWhileLabel977146:
;Else
finit
jmp EndIfLabel549889
ElseLabel931858:
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp radimoMergeSort$
radimoMergeSort db "Primijenit cemo MergeSort algoritam.",10,0
radimoMergeSort$:
invoke printf,radimoMergeSort
end if
;AsmEnd
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
finit
fld dword [razdvajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;While vrhStoga>0
finit
WhileLabel621468:
fld dword [vrhStoga]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterLabel11543
fld1
jmp endOfTheGreaterThanComparisonLabel276557
secondOperandOfTheComparisonIsGreaterLabel11543:
fldz
endOfTheGreaterThanComparisonLabel276557:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel598904
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [donjaGranica],edx
;trebaLiSpajatiIliRazdvajati:=stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [trebaLiSpajatiIliRazdvajati],edx
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;sredinaNiza:=(donjaGranica+gornjaGranica)/2
finit
fld dword [donjaGranica]
fld dword [gornjaGranica]
faddp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fdivp
fstp dword [result]
mov edx, dword [result]
mov dword [sredinaNiza],edx
;sredinaNiza:=sredinaNiza-mod(sredinaNiza,1)
finit
fld dword [sredinaNiza]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
fld dword [sredinaNiza]
fxch
fsubp
fstp dword [result]
mov edx, dword [result]
mov dword [sredinaNiza],edx
;If trebaLiSpajatiIliRazdvajati=razdvajati ;Razdvoji niz original(donjaGranica..gornjaGranica-1) na original(donjaGranica..sredinaNiza-1) i original(sredinaNiza..gornjaGranica-1).
finit
fld dword [trebaLiSpajatiIliRazdvajati]
fld dword [razdvajati]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel516894
fld1
jmp endOfTheEqualityOperatorLabel53176
operandsOfTheEqualityOperatorAreNotEqualLabel516894:
fldz
endOfTheEqualityOperatorLabel53176:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel856440
;If gornjaGranica-donjaGranica>1 ;Niz velicine 0 ili 1 vec je poredan i ne radimo nista dalje.
finit
fld dword [gornjaGranica]
fld dword [donjaGranica]
fsubp
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterLabel391523
fld1
jmp endOfTheGreaterThanComparisonLabel852530
secondOperandOfTheComparisonIsGreaterLabel391523:
fldz
endOfTheGreaterThanComparisonLabel852530:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel589166
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=spajati
finit
fld dword [spajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;;Stavljamo naputak za spajanje nizova prvog na stog kako bi on onda bio zadnji izvaden iz njega.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
finit
fld dword [razdvajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
finit
fld dword [razdvajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;EndIf
finit
ElseLabel589166:
EndIfLabel507955:
;Else ;Spoji vec poredane nizove original(donjaGranica..sredinaNiza-1) i original(sredinaNiza..gornjaGranica-1) u novi poredani niz original(donjaGranica..gornjaGranica-1).
finit
jmp EndIfLabel950467
ElseLabel856440:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;gdjeSmoUPrvomNizu:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUPrvomNizu],edx
;gdjeSmoUDrugomNizu:=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUDrugomNizu],edx
;While i<gornjaGranica
finit
WhileLabel156823:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel848423
fld1
jmp endOfTheLessThanComparisonLabel809957
secondOperandOfTheComparisonIsSmallerLabel848423:
fldz
endOfTheLessThanComparisonLabel809957:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel488521
;If (gdjeSmoUPrvomNizu=sredinaNiza | original(gdjeSmoUDrugomNizu)<original(gdjeSmoUPrvomNizu)) & gdjeSmoUDrugomNizu<gornjaGranica
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel72366
fld1
jmp endOfTheLessThanComparisonLabel941992
secondOperandOfTheComparisonIsSmallerLabel72366:
fldz
endOfTheLessThanComparisonLabel941992:
fld dword [gdjeSmoUPrvomNizu]
fld dword [sredinaNiza]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel370347
fld1
jmp endOfTheEqualityOperatorLabel236890
operandsOfTheEqualityOperatorAreNotEqualLabel370347:
fldz
endOfTheEqualityOperatorLabel236890:
fxch
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
or dword [result],eax
fild dword [result]
fld dword [gdjeSmoUDrugomNizu]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel62967
fld1
jmp endOfTheLessThanComparisonLabel430525
secondOperandOfTheComparisonIsSmallerLabel62967:
fldz
endOfTheLessThanComparisonLabel430525:
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
and dword [result],eax
fild dword [result]
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel367417
;pomocni(i):=original(gdjeSmoUDrugomNizu)
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;gdjeSmoUDrugomNizu:=gdjeSmoUDrugomNizu+1
finit
fld dword [gdjeSmoUDrugomNizu]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUDrugomNizu],edx
;Else
finit
jmp EndIfLabel222406
ElseLabel367417:
;pomocni(i):=original(gdjeSmoUPrvomNizu)
finit
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;gdjeSmoUPrvomNizu:=gdjeSmoUPrvomNizu+1
finit
fld dword [gdjeSmoUPrvomNizu]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUPrvomNizu],edx
;EndIf
finit
EndIfLabel222406:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp WhileLabel156823
EndWhileLabel488521:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
WhileLabel569001:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel433359
fld1
jmp endOfTheLessThanComparisonLabel839089
secondOperandOfTheComparisonIsSmallerLabel433359:
fldz
endOfTheLessThanComparisonLabel839089:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel6980
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [original+4*ebx],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel569001
EndWhileLabel6980:
;EndIf
finit
EndIfLabel950467:
;EndWhile
finit
jmp WhileLabel621468
EndWhileLabel598904:
;EndIf
finit
EndIfLabel549889:
;AsmStart
;Inline assembly begins.
call [clock]
sub eax,[procesorskoVrijeme]
mov [procesorskoVrijeme],eax
if ispisPoruka=1
jmp sortiraniNizJe$
sortiraniNizJe db "Sortirani niz je:",10,0
sortiraniNizJe$:
staviStringNaSistemskiStog sortiraniNizJe
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
WhileLabel722837:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerLabel926135
fld1
jmp endOfTheLessThanComparisonLabel911372
secondOperandOfTheComparisonIsSmallerLabel926135:
fldz
endOfTheLessThanComparisonLabel911372:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel928204
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
fld dword [i]
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;AsmStart
;Inline assembly begins.
lea ebx,[original]
fld dword [pokazivac]
fistp dword [pokazivac]
add ebx,[pokazivac]
fld dword [ebx]
fstp qword [esp]
staviStringNaSistemskiStog znakZaFloatPlusNoviRedPlusNulZnak
call [printf]
;AsmEnd
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel722837
EndWhileLabel928204:
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
staviIntNaSistemskiStog brojac
staviStringNaSistemskiStog unutrasnjaPetljaString
call [printf]
;AsmEnd
;Inline assembly ended.
;n*ln(n)/ln(2) ;Ovo ce se spremiti u "result", pomocnu varijablu koju koristi compiler za AEC.
finit
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fld dword [n]
fxch
fmulp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp
fdivp
fstp dword [result]
;AsmStart
;Inline assembly begins.
fld dword [result]
fstp qword [esp] ;"printf" iz MSVCRT-a za "%f" ocekuje 64-bitni "double", ili, na asemblerskom jeziku, "qword".
staviStringNaSistemskiStog slozenostString
call [printf]
push dword [procesorskoVrijeme]
invoke printf,sortiranjeJeTrajalo
invoke system,_pause
end if
invoke exit,0

;"Konstante", ako njih pokusamo mijenjati, dobijemo Segmentation Fault:
_pause db "PAUSE",0
znakZaCijeliBrojBroj db "%d",0
znakZaNoviRedPlusNulZnak db 10,0
znakZaFloatPlusNoviRedPlusNulZnak db "%f",10,0
unutrasnjaPetljaString db "Unutrasnja petlja izvrsila se %d puta.",10,0
slozenostString db "Ocekivani broj ponavljanja te petlje, po formuli n*log2(n), bio bi %.1f.",10,0
sortiranjeJeTrajalo db "Sortiranje je trajalo %d milisekundi.",10,0
razdvajati dd 0f
spajati dd 1f

section '.rdata' readable writable ;Varijable i polja (u drugom segmentu programa nego sto je izvrsni dio).
original:
repeat 32768 ;Nije preporucljivo ovako na asemblerskom deklarirati nizove, ali zasto bih se pretvarao da radim za racunalom s 4 MB RAM-a, gdje je problem ucitati program gdje je jedan segment velik 640 KB?
dd 0
end repeat
n dd ?
result dd ?
brojac dd ?
pokazivac dd ?
i dd ?
stogSDonjimGranicama:
repeat 32768
dd 0
end repeat
stogSGornjimGranicama:
repeat 32768
dd 0
end repeat
pomocni:
repeat 32768
dd 0
end repeat
vrhStoga dd ?
donjaGranica dd ?
gornjaGranica dd ?
staviVece dd ?
staviManje dd ?
gdjeJePivot dd ?
procesorskoVrijeme dd ?
razvrstanost dd ?
razvrstanostNa dd 8 DUP(?)
polinomPodApsolutnom dd ?
eNaKoju dd ?
kolikoUsporedbiOcekujemoOdQuickSorta dd ?
kolikoUsporedbiOcekujemoOdMergeSorta dd ?
najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac dd ?
pomocniBrojac dd ?
testZaPreljev dd ?
gdjeSmoUDrugomNizu dd ?
gdjeSmoUPrvomNizu dd ?
trebaLiSpajatiIliRazdvajati dd ?
sredinaNiza dd ?
stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove:
repeat 32768
dd 0
end repeat


section '.idata' data readable import
library msvcrt,'msvcrt.dll' ;"msvcrt.dll" je Microsoft Visual C Runtime Library, dostupna u "C:\Windows\System32\msvcrt.dll" na Windows 98 i novijim.
import msvcrt,printf,'printf',system,'system',exit,'exit',scanf,'scanf',clock,'clock'
;AsmEnd
;Inline assembly ended.
