;Generated by ArithmeticExpressionCompiler ( https://flatassembler.github.io/compiler.html ) run in NodeJS.
;;HybridSort algoritam - kombinacija QuickSort algoritma i MergeSort algoritma.
;AsmStart
;Inline assembly begins.
ispisPoruka=1
macro staviIntNaSistemskiStog x ;"x" treba biti pokazivac na 32-bitni decimalni broj ("float"), kojeg ce ova makro-naredba pretvoriti u 32-bitni cijeli broj ("int") i staviti na sistemski stog.
{
sub esp,4
fld dword [x]
fistp dword [esp]
}
macro staviPokazivacNaSistemskiStog x
{
sub esp,4
lea ebx,[x]
mov [esp],ebx
}
macro staviStringNaSistemskiStog x
{
sub esp,4
mov dword [esp],x
}
format PE console ;"PE" je 32-bitna Windowsova ".EXE" datoteka (to nije sve sto FlatAssembler moze stvarati).
entry start

include 'win32a.inc' ;FlatAssemblerove naredbe za upravljanje DLL-ovima (ovdje se koriste za pozivanje C-ovih funkcija iz MSVCRT-a).

section '.text' code executable
start:
if ispisPoruka=1
jmp velicinaUnosa$
velicinaUnosa db "Unesite koliko cete brojeva unijeti.",10,0
velicinaUnosa$:
staviStringNaSistemskiStog velicinaUnosa
call [printf]
end if
staviPokazivacNaSistemskiStog n
jmp znakZaFloat$
znakZaFloat db "%f",0
znakZaFloat$:
staviStringNaSistemskiStog znakZaFloat
call [scanf]
if ispisPoruka=1
jmp pitajZaUnos$
pitajZaUnos db "Unesite te brojeve:",10,0
pitajZaUnos$:
staviStringNaSistemskiStog pitajZaUnos
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;vrhStoga:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;While i<n
finit
WhileLabel788379:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel253373
fld1
jmp endOfTheLessThanComparisonLabel393840
secondOperandOfTheComparisonIsSmallerOrEqualLabel253373:
fldz
endOfTheLessThanComparisonLabel393840:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel261181
;pokazivac:=4*i ;"float" ima 4 bajta.
finit
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
fld dword [i]
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;AsmStart
;Inline assembly begins.
fld dword [pokazivac]
fistp dword [pokazivac]
lea ebx,[original]
add ebx,[pokazivac]
staviPokazivacNaSistemskiStog ebx
staviStringNaSistemskiStog znakZaFloat
call [scanf]
;AsmEnd
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel788379
EndWhileLabel261181:
;AsmStart
;Inline assembly begins.
call [clock] ;"clock" na Windowsima vraca broj milisekundi otkad se program pokrenuo, zadnja 32 bita vraca u procesorski registar "eax".
mov [procesorskoVrijeme],eax
;AsmEnd
;Inline assembly ended.
;razvrstanost:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n-1
finit
WhileLabel727885:
fld dword [n]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fld dword [i]
fxch
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel483621
fld1
jmp endOfTheLessThanComparisonLabel293918
secondOperandOfTheComparisonIsSmallerOrEqualLabel483621:
fldz
endOfTheLessThanComparisonLabel293918:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel152694
;razvrstanost:=razvrstanost+(original(i)<original(i+1))
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fxch
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel823005
fld1
jmp endOfTheLessThanComparisonLabel640662
secondOperandOfTheComparisonIsSmallerOrEqualLabel823005:
fldz
endOfTheLessThanComparisonLabel640662:
fld dword [razvrstanost]
fxch
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp WhileLabel727885
EndWhileLabel152694:
;razvrstanost:=razvrstanost/((n-1)/2)-1
finit
fld dword [n]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fdivp
fld dword [razvrstanost]
fxch
fdivp
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceORazvrstanosti$
izvjesceORazvrstanosti db "Razvrstanost pocetnog niza iznosi: %f",10,0
izvjesceORazvrstanosti$:
fld dword [razvrstanost]
fstp qword [esp]
staviStringNaSistemskiStog izvjesceORazvrstanosti
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=2
finit
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<7 | i=7 
finit
WhileLabel503331:
fld dword [i]
mov dword [result],0x40e00000 ;IEEE754 hex of 7
fld dword [result]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel399364
fld1
jmp endOfTheLessThanComparisonLabel711165
secondOperandOfTheComparisonIsSmallerOrEqualLabel399364:
fldz
endOfTheLessThanComparisonLabel711165:
fld dword [i]
mov dword [result],0x40e00000 ;IEEE754 hex of 7
fld dword [result]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel190426
fld1
jmp endOfTheEqualityOperatorLabel199655
operandsOfTheEqualityOperatorAreNotEqualLabel190426:
fldz
endOfTheEqualityOperatorLabel199655:
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
or dword [result],eax
fild dword [result]
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel174218
;razvrstanostNa(i):=pow(abs(razvrstanost),i) ;"pow(x,y)" je u AEC-u samo sintaksni secer za "exp(ln(x)*y)", i to vraca NaN za x=0 ili x<0. Nema ocitog nacina da se "pow(x,y)" prevede na asemblerski.
finit
fld dword [razvrstanost]
fabs
fld dword [i]
fxch
fld1
fxch
fyl2x
fldl2e
fdivp
fmulp
fldl2e
fmulp
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp
fmulp
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [razvrstanostNa+4*ebx],edx
;If razvrstanost=0
finit
fld dword [razvrstanost]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel305671
fld1
jmp endOfTheEqualityOperatorLabel10635
operandsOfTheEqualityOperatorAreNotEqualLabel305671:
fldz
endOfTheEqualityOperatorLabel10635:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel157983
;razvrstanostNa(i):=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [razvrstanostNa+4*ebx],edx
;EndIf
finit
ElseLabel157983:
EndIfLabel182822:
;If mod(i,2)=1 & razvrstanost<0
finit
fld dword [i]
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel543508
fld1
jmp endOfTheEqualityOperatorLabel124408
operandsOfTheEqualityOperatorAreNotEqualLabel543508:
fldz
endOfTheEqualityOperatorLabel124408:
fld dword [razvrstanost]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel750366
fld1
jmp endOfTheLessThanComparisonLabel789441
secondOperandOfTheComparisonIsSmallerOrEqualLabel750366:
fldz
endOfTheLessThanComparisonLabel789441:
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
and dword [result],eax
fild dword [result]
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel194854
;razvrstanostNa(i):=-razvrstanostNa(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fxch
fsubp
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [razvrstanostNa+4*ebx],edx
;EndIf
finit
ElseLabel194854:
EndIfLabel57899:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel503331
EndWhileLabel174218:
;;Formula koju je ispisao genetski algoritam za predvidanje koliko ce usporedbi QuickSort napraviti: https://github.com/FlatAssembler/ArithmeticExpressionCompiler/tree/master/QuickSort/Genetic_algorithm_for_deriving_the_formula
;polinomPodApsolutnom:=2.38854*razvrstanostNa(7)-0.284258*razvrstanostNa(6)-1.87104*razvrstanostNa(5)+0.372637*razvrstanostNa(4)+0.167242*razvrstanostNa(3)-0.0884977*razvrstanostNa(2)+0.315119*razvrstanost
finit
mov dword [result],0x40e00000 ;IEEE754 hex of 7
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x4018ddd7 ;IEEE754 hex of 2.38854
fld dword [result]
fxch
fmulp
mov dword [result],0x40c00000 ;IEEE754 hex of 6
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3e918a44 ;IEEE754 hex of 0.284258
fld dword [result]
fxch
fmulp
fsubp
mov dword [result],0x40a00000 ;IEEE754 hex of 5
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3fef7e3d ;IEEE754 hex of 1.87104
fld dword [result]
fxch
fmulp
fsubp
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3ebeca47 ;IEEE754 hex of 0.372637
fld dword [result]
fxch
fmulp
faddp
mov dword [result],0x40400000 ;IEEE754 hex of 3
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3e2b417d ;IEEE754 hex of 0.167242
fld dword [result]
fxch
fmulp
faddp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fistp dword [result]
mov ebx, dword [result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3db53e48 ;IEEE754 hex of 0.0884977
fld dword [result]
fxch
fmulp
fsubp
mov dword [result],0x3ea15747 ;IEEE754 hex of 0.315119
fld dword [result]
fld dword [razvrstanost]
fmulp
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [polinomPodApsolutnom],edx
;eNaKoju:=(ln(n)+ln(ln(n)))*1.05+(ln(n)-ln(ln(n)))*0.83*abs(polinomPodApsolutnom)
finit
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fld1
fxch
fyl2x
fldl2e
fdivp
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fxch
fsubp
mov dword [result],0x3f547ae1 ;IEEE754 hex of 0.83
fld dword [result]
fmulp
fld dword [polinomPodApsolutnom]
fabs
fmulp
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fld1
fxch
fyl2x
fldl2e
fdivp
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fxch
faddp
mov dword [result],0x3f866666 ;IEEE754 hex of 1.05
fld dword [result]
fmulp
fxch
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [eNaKoju],edx
;kolikoUsporedbiOcekujemoOdQuickSorta:=exp(eNaKoju)
finit
fld dword [eNaKoju]
fldl2e
fmulp
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [kolikoUsporedbiOcekujemoOdQuickSorta],edx
;kolikoUsporedbiOcekujemoOdMergeSorta:=2*n*ln(n)/ln(2)
finit
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fld dword [n]
fmulp
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fmulp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp
fdivp
fstp dword [result]
mov edx, dword [result]
mov dword [kolikoUsporedbiOcekujemoOdMergeSorta],edx
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp ispisOTomeStoOcekujemo$
ispisOTomeStoOcekujemo db "Od QuickSorta ocekujemo %f usporedbi, a od MergeSorta ocekujemo %f usporedbi.",10,0
ispisOTomeStoOcekujemo$:
fld dword [kolikoUsporedbiOcekujemoOdMergeSorta]
fstp qword [esp+8]
fld dword [kolikoUsporedbiOcekujemoOdQuickSorta]
fstp qword [esp]
staviStringNaSistemskiStog ispisOTomeStoOcekujemo
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=1 ;Da, kada prijedemo MAX_SAFE_INTEGER za "float", ne pokusavamo vise dodavati jedinicu.
finit
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;pomocniBrojac:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;If razvrstanost=1
finit
fld dword [razvrstanost]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel623122
fld1
jmp endOfTheEqualityOperatorLabel375436
operandsOfTheEqualityOperatorAreNotEqualLabel623122:
fldz
endOfTheEqualityOperatorLabel375436:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel767299
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp nizJeVecRazvrstan$
nizJeVecRazvrstan db "Niz je vec poredan, ne radimo nista.",10,0
nizJeVecRazvrstan$:
invoke printf,nizJeVecRazvrstan
end if
;AsmEnd
;Inline assembly ended.
;ElseIf razvrstanost=(-1) ;Da, parser od AEC-a jos nije savrsen i javlja gresku za "razvrstanost=-1".
finit
jmp EndIfLabel206308
ElseLabel767299:
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fld dword [razvrstanost]
fxch
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel971513
fld1
jmp endOfTheEqualityOperatorLabel464549
operandsOfTheEqualityOperatorAreNotEqualLabel971513:
fldz
endOfTheEqualityOperatorLabel464549:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel332854
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp nizJeObrnutoRazvrstan$
nizJeObrnutoRazvrstan db "Niz je obrnuto poredan.",10,0
nizJeObrnutoRazvrstan$:
invoke printf,nizJeObrnutoRazvrstan
end if
;AsmEnd
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
WhileLabel331690:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel569087
fld1
jmp endOfTheLessThanComparisonLabel258523
secondOperandOfTheComparisonIsSmallerOrEqualLabel569087:
fldz
endOfTheLessThanComparisonLabel258523:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel239982
;pomocni(i):=original(n-i-1)
finit
fld dword [n]
fld dword [i]
fsubp
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp WhileLabel331690
EndWhileLabel239982:
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
WhileLabel971591:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel925322
fld1
jmp endOfTheLessThanComparisonLabel807401
secondOperandOfTheComparisonIsSmallerOrEqualLabel925322:
fldz
endOfTheLessThanComparisonLabel807401:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel452867
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [original+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel971591
EndWhileLabel452867:
;ElseIf kolikoUsporedbiOcekujemoOdQuickSorta<kolikoUsporedbiOcekujemoOdMergeSorta
finit
jmp EndIfLabel206308
ElseLabel332854:
fld dword [kolikoUsporedbiOcekujemoOdQuickSorta]
fld dword [kolikoUsporedbiOcekujemoOdMergeSorta]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel954525
fld1
jmp endOfTheLessThanComparisonLabel687733
secondOperandOfTheComparisonIsSmallerOrEqualLabel954525:
fldz
endOfTheLessThanComparisonLabel687733:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel604593
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp radimoQuickSort$
radimoQuickSort db "Primijenit cemo QuickSort algoritam.",10,0
radimoQuickSort$:
invoke printf,radimoQuickSort
end if
;AsmEnd
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;While vrhStoga>0
finit
WhileLabel777190:
fld dword [vrhStoga]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterOrEqualLabel38636
fld1
jmp endOfTheGreaterThanComparisonLabel257824
secondOperandOfTheComparisonIsGreaterOrEqualLabel38636:
fldz
endOfTheGreaterThanComparisonLabel257824:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel873713
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [donjaGranica],edx
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;gdjeJePivot:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeJePivot],edx
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
WhileLabel451746:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel333009
fld1
jmp endOfTheLessThanComparisonLabel329750
secondOperandOfTheComparisonIsSmallerOrEqualLabel333009:
fldz
endOfTheLessThanComparisonLabel329750:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel906277
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel118178
fld1
jmp endOfTheLessThanComparisonLabel379491
secondOperandOfTheComparisonIsSmallerOrEqualLabel118178:
fldz
endOfTheLessThanComparisonLabel379491:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel679737
;gdjeJePivot:=gdjeJePivot+1 ;Gdje ce doci element koji je sada prvi ("pivot").
finit
fld dword [gdjeJePivot]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeJePivot],edx
;EndIf
finit
ElseLabel679737:
EndIfLabel443768:
;i:=i++ ;"++" je u AEC-u jednostavno sintaksni secer za "+1".
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel451746
EndWhileLabel906277:
;staviManje:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [staviManje],edx
;staviVece:=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [staviVece],edx
;pomocni(gdjeJePivot):=original(donjaGranica)
finit
fld dword [donjaGranica]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [gdjeJePivot]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica ;Preuredi niz original(donjaGranica..gornjaGranica-1) tako da svi elementi koji su manji od onoga koji je bio prvi dodu prije njega.
finit
WhileLabel594401:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel375743
fld1
jmp endOfTheLessThanComparisonLabel35860
secondOperandOfTheComparisonIsSmallerOrEqualLabel375743:
fldz
endOfTheLessThanComparisonLabel35860:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel497495
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel523134
fld1
jmp endOfTheLessThanComparisonLabel944930
secondOperandOfTheComparisonIsSmallerOrEqualLabel523134:
fldz
endOfTheLessThanComparisonLabel944930:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel707063
;pomocni(staviManje):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [staviManje]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;staviManje:=staviManje+1
finit
fld dword [staviManje]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [staviManje],edx
;Else
finit
jmp EndIfLabel860662
ElseLabel707063:
;pomocni(staviVece):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [staviVece]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;staviVece:=staviVece+1
finit
fld dword [staviVece]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [staviVece],edx
;EndIf
finit
EndIfLabel860662:
;pomocniBrojac:=pomocniBrojac+1
finit
fld dword [pomocniBrojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;If pomocniBrojac=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac
finit
fld dword [pomocniBrojac]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel290514
fld1
jmp endOfTheEqualityOperatorLabel728400
operandsOfTheEqualityOperatorAreNotEqualLabel290514:
fldz
endOfTheEqualityOperatorLabel728400:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel132924
;brojac:=brojac+pomocniBrojac
finit
fld dword [brojac]
fld dword [pomocniBrojac]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;pomocniBrojac:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;EndIf
finit
ElseLabel132924:
EndIfLabel676829:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel594401
EndWhileLabel497495:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
WhileLabel345798:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel679092
fld1
jmp endOfTheLessThanComparisonLabel82944
secondOperandOfTheComparisonIsSmallerOrEqualLabel679092:
fldz
endOfTheLessThanComparisonLabel82944:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel46806
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [original+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel345798
EndWhileLabel46806:
;;Razdvoji niz original(donjaGranica..gornjaGranica-1) na nizove original(donjaGranica..gdjeJePivot-1) i original(gdjeJePivot+1..gornjaGranica-1).
;;Znamo gdje je pivot, pa njega ne trebamo ukljuciti ni u jedan od tih nizova.
;;I ne trebamo na stog stavljati naputke o razvrstavanju nizova velicine 0 ili 1.
;If gdjeJePivot<gornjaGranica-1
finit
fld dword [gornjaGranica]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel861879
fld1
jmp endOfTheLessThanComparisonLabel538340
secondOperandOfTheComparisonIsSmallerOrEqualLabel861879:
fldz
endOfTheLessThanComparisonLabel538340:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel938976
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
finit
ElseLabel938976:
EndIfLabel834907:
;If gdjeJePivot>donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterOrEqualLabel884394
fld1
jmp endOfTheGreaterThanComparisonLabel538850
secondOperandOfTheComparisonIsGreaterOrEqualLabel884394:
fldz
endOfTheGreaterThanComparisonLabel538850:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel239114
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gdjeJePivot
finit
fld dword [gdjeJePivot]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
finit
ElseLabel239114:
EndIfLabel634657:
;testZaPreljev:=brojac+najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac ;Potrebna je posebna varijabla za to jer FPU interno radi s 80-bitnim brojevima, a CPU s 32-bitnim. Izgubio sam hrpu vremena da to shvatim.
finit
fld dword [brojac]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [testZaPreljev],edx
;If not(testZaPreljev>brojac)
finit
fld dword [testZaPreljev]
fld dword [brojac]
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterOrEqualLabel619911
fld1
jmp endOfTheGreaterThanComparisonLabel413787
secondOperandOfTheComparisonIsGreaterOrEqualLabel619911:
fldz
endOfTheGreaterThanComparisonLabel413787:
fld1
fxch
fsubp
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel694350
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac*2
finit
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceOpreljevu$
izvjesceOpreljevu db "Upozorenje: Brojac mozda nece sadrzavati tocan rezultat, dogodio se preljev na %d. iteraciji."
db " Najveca ocekivana pogreska za ovaj preljev je %d krivo prebrojanih izvrsavanja unutarnje petlje.",10,0
izvjesceOpreljevu$:
fld dword [gornjaGranica]
fld dword [donjaGranica]
fsubp
fabs
fistp dword [esp+4]
fld dword [brojac]
fistp dword [esp]
invoke printf,izvjesceOpreljevu
end if      
;AsmEnd
;Inline assembly ended.
;EndIf
finit
ElseLabel694350:
EndIfLabel760915:
;EndWhile
finit
jmp WhileLabel777190
EndWhileLabel873713:
;Else
finit
jmp EndIfLabel206308
ElseLabel604593:
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
jmp radimoMergeSort$
radimoMergeSort db "Primijenit cemo MergeSort algoritam.",10,0
radimoMergeSort$:
invoke printf,radimoMergeSort
end if
;AsmEnd
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
finit
fld dword [razdvajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;While vrhStoga>0
finit
WhileLabel357125:
fld dword [vrhStoga]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterOrEqualLabel706476
fld1
jmp endOfTheGreaterThanComparisonLabel192657
secondOperandOfTheComparisonIsGreaterOrEqualLabel706476:
fldz
endOfTheGreaterThanComparisonLabel192657:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel730434
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [donjaGranica],edx
;trebaLiSpajatiIliRazdvajati:=stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [trebaLiSpajatiIliRazdvajati],edx
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;sredinaNiza:=(donjaGranica+gornjaGranica)/2
finit
fld dword [donjaGranica]
fld dword [gornjaGranica]
faddp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fdivp
fstp dword [result]
mov edx, dword [result]
mov dword [sredinaNiza],edx
;sredinaNiza:=sredinaNiza-mod(sredinaNiza,1)
finit
fld dword [sredinaNiza]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
fld dword [sredinaNiza]
fxch
fsubp
fstp dword [result]
mov edx, dword [result]
mov dword [sredinaNiza],edx
;If trebaLiSpajatiIliRazdvajati=razdvajati ;Razdvoji niz original(donjaGranica..gornjaGranica-1) na original(donjaGranica..sredinaNiza-1) i original(sredinaNiza..gornjaGranica-1).
finit
fld dword [trebaLiSpajatiIliRazdvajati]
fld dword [razdvajati]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel53974
fld1
jmp endOfTheEqualityOperatorLabel507661
operandsOfTheEqualityOperatorAreNotEqualLabel53974:
fldz
endOfTheEqualityOperatorLabel507661:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel553840
;If gornjaGranica-donjaGranica>1 ;Niz velicine 0 ili 1 vec je poredan i ne radimo nista dalje.
finit
fld dword [gornjaGranica]
fld dword [donjaGranica]
fsubp
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterOrEqualLabel752334
fld1
jmp endOfTheGreaterThanComparisonLabel897003
secondOperandOfTheComparisonIsGreaterOrEqualLabel752334:
fldz
endOfTheGreaterThanComparisonLabel897003:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel34757
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=spajati
finit
fld dword [spajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;;Stavljamo naputak za spajanje nizova prvog na stog kako bi on onda bio zadnji izvaden iz njega.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
finit
fld dword [razdvajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
finit
fld dword [razdvajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;EndIf
finit
ElseLabel34757:
EndIfLabel598687:
;Else ;Spoji vec poredane nizove original(donjaGranica..sredinaNiza-1) i original(sredinaNiza..gornjaGranica-1) u novi poredani niz original(donjaGranica..gornjaGranica-1).
finit
jmp EndIfLabel761036
ElseLabel553840:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;gdjeSmoUPrvomNizu:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUPrvomNizu],edx
;gdjeSmoUDrugomNizu:=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUDrugomNizu],edx
;While i<gornjaGranica
finit
WhileLabel225351:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel906541
fld1
jmp endOfTheLessThanComparisonLabel161536
secondOperandOfTheComparisonIsSmallerOrEqualLabel906541:
fldz
endOfTheLessThanComparisonLabel161536:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel901289
;If (gdjeSmoUPrvomNizu=sredinaNiza | original(gdjeSmoUDrugomNizu)<original(gdjeSmoUPrvomNizu)) & gdjeSmoUDrugomNizu<gornjaGranica
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel393160
fld1
jmp endOfTheLessThanComparisonLabel3643
secondOperandOfTheComparisonIsSmallerOrEqualLabel393160:
fldz
endOfTheLessThanComparisonLabel3643:
fld dword [gdjeSmoUPrvomNizu]
fld dword [sredinaNiza]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel478177
fld1
jmp endOfTheEqualityOperatorLabel351093
operandsOfTheEqualityOperatorAreNotEqualLabel478177:
fldz
endOfTheEqualityOperatorLabel351093:
fxch
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
or dword [result],eax
fild dword [result]
fld dword [gdjeSmoUDrugomNizu]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel86309
fld1
jmp endOfTheLessThanComparisonLabel785564
secondOperandOfTheComparisonIsSmallerOrEqualLabel86309:
fldz
endOfTheLessThanComparisonLabel785564:
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
and dword [result],eax
fild dword [result]
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel717533
;pomocni(i):=original(gdjeSmoUDrugomNizu)
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;gdjeSmoUDrugomNizu:=gdjeSmoUDrugomNizu+1
finit
fld dword [gdjeSmoUDrugomNizu]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUDrugomNizu],edx
;Else
finit
jmp EndIfLabel292611
ElseLabel717533:
;pomocni(i):=original(gdjeSmoUPrvomNizu)
finit
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;gdjeSmoUPrvomNizu:=gdjeSmoUPrvomNizu+1
finit
fld dword [gdjeSmoUPrvomNizu]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUPrvomNizu],edx
;EndIf
finit
EndIfLabel292611:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp WhileLabel225351
EndWhileLabel901289:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
WhileLabel991238:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel230179
fld1
jmp endOfTheLessThanComparisonLabel49589
secondOperandOfTheComparisonIsSmallerOrEqualLabel230179:
fldz
endOfTheLessThanComparisonLabel49589:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel476704
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [original+4*ebx],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel991238
EndWhileLabel476704:
;EndIf
finit
EndIfLabel761036:
;EndWhile
finit
jmp WhileLabel357125
EndWhileLabel730434:
;EndIf
finit
EndIfLabel206308:
;AsmStart
;Inline assembly begins.
call [clock]
sub eax,[procesorskoVrijeme]
mov [procesorskoVrijeme],eax
if ispisPoruka=1
jmp sortiraniNizJe$
sortiraniNizJe db "Sortirani niz je:",10,0
sortiraniNizJe$:
staviStringNaSistemskiStog sortiraniNizJe
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
WhileLabel645962:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel856372
fld1
jmp endOfTheLessThanComparisonLabel702695
secondOperandOfTheComparisonIsSmallerOrEqualLabel856372:
fldz
endOfTheLessThanComparisonLabel702695:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel700394
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
fld dword [i]
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;AsmStart
;Inline assembly begins.
lea ebx,[original]
fld dword [pokazivac]
fistp dword [pokazivac]
add ebx,[pokazivac]
fld dword [ebx]
fstp qword [esp]
staviStringNaSistemskiStog znakZaFloatPlusNoviRedPlusNulZnak
call [printf]
;AsmEnd
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel645962
EndWhileLabel700394:
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
staviIntNaSistemskiStog brojac
staviStringNaSistemskiStog unutrasnjaPetljaString
call [printf]
;AsmEnd
;Inline assembly ended.
;n*ln(n)/ln(2) ;Ovo ce se spremiti u "result", pomocnu varijablu koju koristi compiler za AEC.
finit
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fld dword [n]
fxch
fmulp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp
fdivp
fstp dword [result]
;AsmStart
;Inline assembly begins.
fld dword [result]
fstp qword [esp] ;"printf" iz MSVCRT-a za "%f" ocekuje 64-bitni "double", ili, na asemblerskom jeziku, "qword".
staviStringNaSistemskiStog slozenostString
call [printf]
push dword [procesorskoVrijeme]
invoke printf,sortiranjeJeTrajalo
invoke system,_pause
end if
invoke exit,0

;"Konstante", ako njih pokusamo mijenjati, dobijemo Segmentation Fault:
_pause db "PAUSE",0
znakZaCijeliBrojBroj db "%d",0
znakZaNoviRedPlusNulZnak db 10,0
znakZaFloatPlusNoviRedPlusNulZnak db "%f",10,0
unutrasnjaPetljaString db "Unutrasnja petlja izvrsila se %d puta.",10,0
slozenostString db "Ocekivani broj ponavljanja te petlje, po formuli n*log2(n), bio bi %.1f.",10,0
sortiranjeJeTrajalo db "Sortiranje je trajalo %d milisekundi.",10,0
razdvajati dd 0f
spajati dd 1f

section '.rdata' readable writable ;Varijable i polja (u drugom segmentu programa nego sto je izvrsni dio).
original:
repeat 32768 ;Nije preporucljivo ovako na asemblerskom deklarirati nizove, ali zasto bih se pretvarao da radim za racunalom s 4 MB RAM-a, gdje je problem ucitati program gdje je jedan segment velik 640 KB?
dd 0
end repeat
n dd ?
result dd ?
brojac dd ?
pokazivac dd ?
i dd ?
stogSDonjimGranicama:
repeat 32768
dd 0
end repeat
stogSGornjimGranicama:
repeat 32768
dd 0
end repeat
pomocni:
repeat 32768
dd 0
end repeat
vrhStoga dd ?
donjaGranica dd ?
gornjaGranica dd ?
staviVece dd ?
staviManje dd ?
gdjeJePivot dd ?
procesorskoVrijeme dd ?
razvrstanost dd ?
razvrstanostNa dd 8 DUP(?)
polinomPodApsolutnom dd ?
eNaKoju dd ?
kolikoUsporedbiOcekujemoOdQuickSorta dd ?
kolikoUsporedbiOcekujemoOdMergeSorta dd ?
najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac dd ?
pomocniBrojac dd ?
testZaPreljev dd ?
gdjeSmoUDrugomNizu dd ?
gdjeSmoUPrvomNizu dd ?
trebaLiSpajatiIliRazdvajati dd ?
sredinaNiza dd ?
stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove:
repeat 32768
dd 0
end repeat


section '.idata' data readable import
library msvcrt,'msvcrt.dll' ;"msvcrt.dll" je Microsoft Visual C Runtime Library, dostupna u "C:\Windows\System32\msvcrt.dll" na Windows 98 i novijim.
import msvcrt,printf,'printf',system,'system',exit,'exit',scanf,'scanf',clock,'clock'
;AsmEnd
;Inline assembly ended.
;
