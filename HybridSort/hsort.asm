;Generated by Arithmetic Expression Compiler (http://flatassembler.000webhostapp.com/compiler.html) run in Duktape.
;;HybridSort algoritam - kombinacija QuickSort algoritma i MergeSort algoritma.
;Inline assembly begins.
ispisPoruka=1
macro staviIntNaSistemskiStog x ;"x" treba biti pokazivac na 32-bitni decimalni broj ("float"), kojeg ce ova makro-naredba pretvoriti u 32-bitni cijeli broj ("int") i staviti na sistemski stog.
{
sub esp,4
fld dword [x]
fistp dword [esp]
}
macro staviPokazivacNaSistemskiStog x
{
sub esp,4
lea ebx,[x]
mov [esp],ebx
}
macro staviStringNaSistemskiStog x
{
sub esp,4
mov dword [esp],x
}
format PE console ;"PE" je 32-bitna Windowsova ".EXE" datoteka (to nije sve sto FlatAssembler moze stvarati).
entry start

include 'win32a.inc' ;FlatAssemblerove naredbe za upravljanje DLL-ovima (ovdje se koriste za pozivanje C-ovih funkcija iz MSVCRT-a).

section '.text' code executable
start:
if ispisPoruka=1
jmp velicinaUnosa$
velicinaUnosa db "Unesite koliko cete brojeva unijeti.",10,0
velicinaUnosa$:
staviStringNaSistemskiStog velicinaUnosa
call [printf]
end if
staviPokazivacNaSistemskiStog n
jmp znakZaFloat$
znakZaFloat db "%f",0
znakZaFloat$:
staviStringNaSistemskiStog znakZaFloat
call [scanf]
if ispisPoruka=1
jmp pitajZaUnos$
pitajZaUnos db "Unesite te brojeve:",10,0
pitajZaUnos$:
staviStringNaSistemskiStog pitajZaUnos
call [printf]
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;vrhStoga:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;While i<n
finit
l988096:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l726496
fld1
jmp l360752
l726496:
fldz
l360752:
fistp dword [result]
mov eax,[result]
test eax,eax
je l749166
;pokazivac:=4*i ;"float" ima 4 bajta.
finit
mov dword [result],0x40800000 ;4
fld dword [result]
fld dword [i]
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;Inline assembly begins.
fld dword [pokazivac]
fistp dword [pokazivac]
lea ebx,[original]
add ebx,[pokazivac]
staviPokazivacNaSistemskiStog ebx
staviStringNaSistemskiStog znakZaFloat
call [scanf]
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l988096
l749166:
;Inline assembly begins.
call [clock] ;"clock" na Windowsima vraca broj milisekundi otkad se program pokrenuo, zadnja 32 bita vraca u procesorski registar "eax".
mov [procesorskoVrijeme],eax
;Inline assembly ended.
;razvrstanost:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n-1
finit
l351343:
fld dword [n]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fld dword [i]
fxch
fcomip st1
fstp dword [result]
jna l41477
fld1
jmp l578222
l41477:
fldz
l578222:
fistp dword [result]
mov eax,[result]
test eax,eax
je l432123
;razvrstanost:=razvrstanost+(original(i)<original(i+1))
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fxch
fcomip st1
fstp dword [result]
jna l996949
fld1
jmp l933359
l996949:
fldz
l933359:
fld dword [razvrstanost]
fxch
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp l351343
l432123:
;razvrstanost:=razvrstanost/((n-1)/2)-1
finit
fld dword [n]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fdivp st1,st0
fld dword [razvrstanost]
fxch
fdivp st1,st0
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceORazvrstanosti$
izvjesceORazvrstanosti db "Razvrstanost pocetnog niza iznosi: %f",10,0
izvjesceORazvrstanosti$:
fld dword [razvrstanost]
fstp qword [esp]
staviStringNaSistemskiStog izvjesceORazvrstanosti
call [printf]
end if
;Inline assembly ended.
;i:=2
finit
mov dword [result],0x40000000 ;2
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<7 | i=7 
finit
l360167:
fld dword [i]
mov dword [result],0x40E00000 ;7
fld dword [result]
fcomip st1
fstp dword [result]
jna l413883
fld1
jmp l901059
l413883:
fldz
l901059:
fld dword [i]
mov dword [result],0x40E00000 ;7
fld dword [result]
fcomip st1
fstp dword [result]
jne l995050
fld1
jmp l740332
l995050:
fldz
l740332:
fistp dword [result]
mov eax,[result]
fistp dword [result]
or [result],eax
fild dword [result]
fistp dword [result]
mov eax,[result]
test eax,eax
je l593503
;razvrstanostNa(i):=pow(abs(razvrstanost),i) ;"pow(x,y)" je u AEC-u samo sintaksni secer za "exp(ln(x)*y)", i to vraca NaN za x=0 ili x<0. Nema ocitog nacina da se "pow(x,y)" prevede na asemblerski.
finit
fld dword [razvrstanost]
fabs
fld dword [i]
fxch
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fmulp st1,st0
fldl2e
fmulp st1,st0
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp st1,st0
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [razvrstanostNa+4*ebx],edx
;If razvrstanost=0
finit
fld dword [razvrstanost]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jne l981968
fld1
jmp l221606
l981968:
fldz
l221606:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l371421
;razvrstanostNa(i):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [razvrstanostNa+4*ebx],edx
;EndIf
finit
l371421:
l859384:
;If mod(i,2)=1 & razvrstanost<0
finit
fld dword [i]
mov dword [result],0x40000000 ;2
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
mov dword [result],0x3F800000 ;1
fld dword [result]
fcomip st1
fstp dword [result]
jne l81647
fld1
jmp l388467
l81647:
fldz
l388467:
fld dword [razvrstanost]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jna l16355
fld1
jmp l519903
l16355:
fldz
l519903:
fistp dword [result]
mov eax,[result]
fistp dword [result]
and [result],eax
fild dword [result]
fistp dword [result]
mov eax,[result]
test eax,eax
jz l726766
;razvrstanostNa(i):=-razvrstanostNa(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x0 ;0
fld dword [result]
fxch
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [razvrstanostNa+4*ebx],edx
;EndIf
finit
l726766:
l406254:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l360167
l593503:
;;Formula koju je ispisao genetski algoritam za predvidanje koliko ce usporedbi QuickSort napraviti: https://github.com/FlatAssembler/ArithmeticExpressionCompiler/tree/master/QuickSort/Genetic_algorithm_for_deriving_the_formula
;polinomPodApsolutnom:=2.38854*razvrstanostNa(7)-0.284258*razvrstanostNa(6)-1.87104*razvrstanostNa(5)+0.372637*razvrstanostNa(4)+0.167242*razvrstanostNa(3)-0.0884977*razvrstanostNa(2)+0.315119*razvrstanost
finit
mov dword [result],0x40E00000 ;7
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x4018DDD7 ;2.38854
fld dword [result]
fxch
fmulp st1,st0
mov dword [result],0x40C00000 ;6
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3E918A44 ;0.284258
fld dword [result]
fxch
fmulp st1,st0
fsubp st1,st0
mov dword [result],0x40A00000 ;5
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3FEF7E3D ;1.87104
fld dword [result]
fxch
fmulp st1,st0
fsubp st1,st0
mov dword [result],0x40800000 ;4
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3EBECA47 ;0.372637
fld dword [result]
fxch
fmulp st1,st0
faddp st1,st0
mov dword [result],0x40400000 ;3
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3E2B417D ;0.167242
fld dword [result]
fxch
fmulp st1,st0
faddp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3DB53E48 ;0.0884977
fld dword [result]
fxch
fmulp st1,st0
fsubp st1,st0
mov dword [result],0x3EA15747 ;0.315119
fld dword [result]
fld dword [razvrstanost]
fmulp st1,st0
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [polinomPodApsolutnom],edx
;eNaKoju:=(ln(n)+ln(ln(n)))*1.05+(ln(n)-ln(ln(n)))*0.83*abs(polinomPodApsolutnom)
finit
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fxch
fsubp st1,st0
mov dword [result],0x3F547AE1 ;0.83
fld dword [result]
fmulp st1,st0
fld dword [polinomPodApsolutnom]
fabs
fmulp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fxch
faddp st1,st0
mov dword [result],0x3F866666 ;1.05
fld dword [result]
fmulp st1,st0
fxch
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [eNaKoju],edx
;kolikoUsporedbiOcekujemoOdQuickSorta:=exp(eNaKoju)
finit
fld dword [eNaKoju]
fldl2e
fmulp st1,st0
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp st1,st0
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [kolikoUsporedbiOcekujemoOdQuickSorta],edx
;kolikoUsporedbiOcekujemoOdMergeSorta:=2*n*ln(n)/ln(2)
finit
mov dword [result],0x40000000 ;2
fld dword [result]
fld dword [n]
fmulp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fmulp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fdivp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [kolikoUsporedbiOcekujemoOdMergeSorta],edx
;Inline assembly begins.
if ispisPoruka=1
jmp ispisOTomeStoOcekujemo$
ispisOTomeStoOcekujemo db "Od QuickSorta ocekujemo %f usporedbi, a od MergeSorta ocekujemo %f usporedbi.",10,0
ispisOTomeStoOcekujemo$:
fld dword [kolikoUsporedbiOcekujemoOdMergeSorta]
fstp qword [esp+8]
fld dword [kolikoUsporedbiOcekujemoOdQuickSorta]
fstp qword [esp]
staviStringNaSistemskiStog ispisOTomeStoOcekujemo
call [printf]
end if
;Inline assembly ended.
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=1 ;Da, kada prijedemo MAX_SAFE_INTEGER za "float", ne pokusavamo vise dodavati jedinicu.
finit
mov dword [result],0x3F800000 ;1
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;pomocniBrojac:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;If razvrstanost=1
finit
fld dword [razvrstanost]
mov dword [result],0x3F800000 ;1
fld dword [result]
fcomip st1
fstp dword [result]
jne l120449
fld1
jmp l878835
l120449:
fldz
l878835:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l379877
;Inline assembly begins.
if ispisPoruka=1
jmp nizJeVecRazvrstan$
nizJeVecRazvrstan db "Niz je vec poredan, ne radimo nista.",10,0
nizJeVecRazvrstan$:
invoke printf,nizJeVecRazvrstan
end if
;Inline assembly ended.
;ElseIf razvrstanost=(-1) ;Da, parser od AEC-a jos nije savrsen i javlja gresku za "razvrstanost=-1".
finit
jmp l928125
l379877:
mov dword [result],0x0 ;0
fld dword [result]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fld dword [razvrstanost]
fxch
fcomip st1
fstp dword [result]
jne l165683
fld1
jmp l895601
l165683:
fldz
l895601:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l48354
;Inline assembly begins.
if ispisPoruka=1
jmp nizJeObrnutoRazvrstan$
nizJeObrnutoRazvrstan db "Niz je obrnuto poredan.",10,0
nizJeObrnutoRazvrstan$:
invoke printf,nizJeObrnutoRazvrstan
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
l707558:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l840266
fld1
jmp l702447
l840266:
fldz
l702447:
fistp dword [result]
mov eax,[result]
test eax,eax
je l946501
;pomocni(i):=original(n-i-1)
finit
fld dword [n]
fld dword [i]
fsubp st1,st0
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp l707558
l946501:
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
l941164:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l840269
fld1
jmp l526819
l840269:
fldz
l526819:
fistp dword [result]
mov eax,[result]
test eax,eax
je l268758
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [original+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l941164
l268758:
;ElseIf kolikoUsporedbiOcekujemoOdQuickSorta<kolikoUsporedbiOcekujemoOdMergeSorta
finit
jmp l928125
l48354:
fld dword [kolikoUsporedbiOcekujemoOdQuickSorta]
fld dword [kolikoUsporedbiOcekujemoOdMergeSorta]
fcomip st1
fstp dword [result]
jna l934623
fld1
jmp l337042
l934623:
fldz
l337042:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l256007
;Inline assembly begins.
if ispisPoruka=1
jmp radimoQuickSort$
radimoQuickSort db "Primijenit cemo QuickSort algoritam.",10,0
radimoQuickSort$:
invoke printf,radimoQuickSort
end if
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;While vrhStoga>0
finit
l765469:
fld dword [vrhStoga]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jnb l682643
fld1
jmp l86643
l682643:
fldz
l86643:
fistp dword [result]
mov eax,[result]
test eax,eax
je l570812
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [donjaGranica],edx
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;gdjeJePivot:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeJePivot],edx
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
l244503:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l778839
fld1
jmp l403309
l778839:
fldz
l403309:
fistp dword [result]
mov eax,[result]
test eax,eax
je l526530
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna l106507
fld1
jmp l673737
l106507:
fldz
l673737:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l606498
;gdjeJePivot:=gdjeJePivot+1 ;Gdje ce doci element koji je sada prvi ("pivot").
finit
fld dword [gdjeJePivot]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeJePivot],edx
;EndIf
finit
l606498:
l546649:
;i:=i++ ;"++" je u AEC-u jednostavno sintaksni secer za "+1".
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l244503
l526530:
;staviManje:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [staviManje],edx
;staviVece:=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [staviVece],edx
;pomocni(gdjeJePivot):=original(donjaGranica)
finit
fld dword [donjaGranica]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [gdjeJePivot]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica ;Preuredi niz original(donjaGranica..gornjaGranica-1) tako da svi elementi koji su manji od onoga koji je bio prvi dodu prije njega.
finit
l133694:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l272964
fld1
jmp l773847
l272964:
fldz
l773847:
fistp dword [result]
mov eax,[result]
test eax,eax
je l305551
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna l361008
fld1
jmp l975398
l361008:
fldz
l975398:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l883415
;pomocni(staviManje):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [staviManje]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;staviManje:=staviManje+1
finit
fld dword [staviManje]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [staviManje],edx
;Else
finit
jmp l352550
l883415:
;pomocni(staviVece):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [staviVece]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;staviVece:=staviVece+1
finit
fld dword [staviVece]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [staviVece],edx
;EndIf
finit
l352550:
;pomocniBrojac:=pomocniBrojac+1
finit
fld dword [pomocniBrojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;If pomocniBrojac=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac
finit
fld dword [pomocniBrojac]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
fcomip st1
fstp dword [result]
jne l898380
fld1
jmp l657441
l898380:
fldz
l657441:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l291998
;brojac:=brojac+pomocniBrojac
finit
fld dword [brojac]
fld dword [pomocniBrojac]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;pomocniBrojac:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;EndIf
finit
l291998:
l220009:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l133694
l305551:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
l189531:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l335876
fld1
jmp l754045
l335876:
fldz
l754045:
fistp dword [result]
mov eax,[result]
test eax,eax
je l629145
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [original+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l189531
l629145:
;;Razdvoji niz original(donjaGranica..gornjaGranica-1) na nizove original(donjaGranica..gdjeJePivot-1) i original(gdjeJePivot+1..gornjaGranica-1).
;;Znamo gdje je pivot, pa njega ne trebamo ukljuciti ni u jedan od tih nizova.
;;I ne trebamo na stog stavljati naputke o razvrstavanju nizova velicine 0 ili 1.
;If gdjeJePivot<gornjaGranica-1
finit
fld dword [gornjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jna l779606
fld1
jmp l767726
l779606:
fldz
l767726:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l996785
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
finit
l996785:
l117214:
;If gdjeJePivot>donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jnb l942735
fld1
jmp l846996
l942735:
fldz
l846996:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l701994
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gdjeJePivot
finit
fld dword [gdjeJePivot]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
finit
l701994:
l285548:
;testZaPreljev:=brojac+najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac ;Potrebna je posebna varijabla za to jer FPU interno radi s 80-bitnim brojevima, a CPU s 32-bitnim. Izgubio sam hrpu vremena da to shvatim.
finit
fld dword [brojac]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [testZaPreljev],edx
;If not(testZaPreljev>brojac)
finit
fld dword [testZaPreljev]
fld dword [brojac]
fcomip st1
fstp dword [result]
jnb l490094
fld1
jmp l786064
l490094:
fldz
l786064:
fld1
fxch
fsubp st1,st0
fistp dword [result]
mov eax,[result]
test eax,eax
jz l126029
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac*2
finit
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
mov dword [result],0x40000000 ;2
fld dword [result]
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceOpreljevu$
izvjesceOpreljevu db "Upozorenje: Brojac mozda nece sadrzavati tocan rezultat, dogodio se preljev na %d. iteraciji."
db " Najveca ocekivana pogreska za ovaj preljev je %d krivo prebrojanih izvrsavanja unutarnje petlje.",10,0
izvjesceOpreljevu$:
fld dword [gornjaGranica]
fld dword [donjaGranica]
fsubp
fabs
fistp dword [esp+4]
fld dword [brojac]
fistp dword [esp]
invoke printf,izvjesceOpreljevu
end if      
;Inline assembly ended.
;EndIf
finit
l126029:
l846740:
;EndWhile
finit
jmp l765469
l570812:
;Else
finit
jmp l928125
l256007:
;Inline assembly begins.
if ispisPoruka=1
jmp radimoMergeSort$
radimoMergeSort db "Primijenit cemo MergeSort algoritam.",10,0
radimoMergeSort$:
invoke printf,radimoMergeSort
end if
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
finit
fld dword [razdvajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;While vrhStoga>0
finit
l218052:
fld dword [vrhStoga]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jnb l657603
fld1
jmp l930570
l657603:
fldz
l930570:
fistp dword [result]
mov eax,[result]
test eax,eax
je l212443
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [donjaGranica],edx
;trebaLiSpajatiIliRazdvajati:=stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [trebaLiSpajatiIliRazdvajati],edx
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;sredinaNiza:=(donjaGranica+gornjaGranica)/2
finit
fld dword [donjaGranica]
fld dword [gornjaGranica]
faddp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fdivp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [sredinaNiza],edx
;sredinaNiza:=sredinaNiza-mod(sredinaNiza,1)
finit
fld dword [sredinaNiza]
mov dword [result],0x3F800000 ;1
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
fld dword [sredinaNiza]
fxch
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [sredinaNiza],edx
;If trebaLiSpajatiIliRazdvajati=razdvajati ;Razdvoji niz original(donjaGranica..gornjaGranica-1) na original(donjaGranica..sredinaNiza-1) i original(sredinaNiza..gornjaGranica-1).
finit
fld dword [trebaLiSpajatiIliRazdvajati]
fld dword [razdvajati]
fcomip st1
fstp dword [result]
jne l600986
fld1
jmp l516169
l600986:
fldz
l516169:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l891980
;If gornjaGranica-donjaGranica>1 ;Niz velicine 0 ili 1 vec je poredan i ne radimo nista dalje.
finit
fld dword [gornjaGranica]
fld dword [donjaGranica]
fsubp st1,st0
mov dword [result],0x3F800000 ;1
fld dword [result]
fcomip st1
fstp dword [result]
jnb l796254
fld1
jmp l853991
l796254:
fldz
l853991:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l70617
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=spajati
finit
fld dword [spajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;;Stavljamo naputak za spajanje nizova prvog na stog kako bi on onda bio zadnji izvaden iz njega.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
finit
fld dword [razdvajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
finit
fld dword [razdvajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;EndIf
finit
l70617:
l281439:
;Else ;Spoji vec poredane nizove original(donjaGranica..sredinaNiza-1) i original(sredinaNiza..gornjaGranica-1) u novi poredani niz original(donjaGranica..gornjaGranica-1).
finit
jmp l597677
l891980:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;gdjeSmoUPrvomNizu:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUPrvomNizu],edx
;gdjeSmoUDrugomNizu:=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUDrugomNizu],edx
;While i<gornjaGranica
finit
l786658:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l708526
fld1
jmp l172979
l708526:
fldz
l172979:
fistp dword [result]
mov eax,[result]
test eax,eax
je l576181
;If (gdjeSmoUPrvomNizu=sredinaNiza | original(gdjeSmoUDrugomNizu)<original(gdjeSmoUPrvomNizu)) & gdjeSmoUDrugomNizu<gornjaGranica
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna l502410
fld1
jmp l537686
l502410:
fldz
l537686:
fld dword [gdjeSmoUPrvomNizu]
fld dword [sredinaNiza]
fcomip st1
fstp dword [result]
jne l516250
fld1
jmp l312747
l516250:
fldz
l312747:
fxch
fistp dword [result]
mov eax,[result]
fistp dword [result]
or [result],eax
fild dword [result]
fld dword [gdjeSmoUDrugomNizu]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l828629
fld1
jmp l233363
l828629:
fldz
l233363:
fistp dword [result]
mov eax,[result]
fistp dword [result]
and [result],eax
fild dword [result]
fistp dword [result]
mov eax,[result]
test eax,eax
jz l168126
;pomocni(i):=original(gdjeSmoUDrugomNizu)
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;gdjeSmoUDrugomNizu:=gdjeSmoUDrugomNizu+1
finit
fld dword [gdjeSmoUDrugomNizu]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUDrugomNizu],edx
;Else
finit
jmp l657232
l168126:
;pomocni(i):=original(gdjeSmoUPrvomNizu)
finit
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;gdjeSmoUPrvomNizu:=gdjeSmoUPrvomNizu+1
finit
fld dword [gdjeSmoUPrvomNizu]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUPrvomNizu],edx
;EndIf
finit
l657232:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp l786658
l576181:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
l579902:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l273422
fld1
jmp l248142
l273422:
fldz
l248142:
fistp dword [result]
mov eax,[result]
test eax,eax
je l165881
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [original+4*ebx],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l579902
l165881:
;EndIf
finit
l597677:
;EndWhile
finit
jmp l218052
l212443:
;EndIf
finit
l928125:
;Inline assembly begins.
call [clock]
sub eax,[procesorskoVrijeme]
mov [procesorskoVrijeme],eax
if ispisPoruka=1
jmp sortiraniNizJe$
sortiraniNizJe db "Sortirani niz je:",10,0
sortiraniNizJe$:
staviStringNaSistemskiStog sortiraniNizJe
call [printf]
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
l841185:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l914499
fld1
jmp l922779
l914499:
fldz
l922779:
fistp dword [result]
mov eax,[result]
test eax,eax
je l101480
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;4
fld dword [result]
fld dword [i]
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;Inline assembly begins.
lea ebx,[original]
fld dword [pokazivac]
fistp dword [pokazivac]
add ebx,[pokazivac]
fld dword [ebx]
fstp qword [esp]
staviStringNaSistemskiStog znakZaFloatPlusNoviRedPlusNulZnak
call [printf]
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l841185
l101480:
;Inline assembly begins.
if ispisPoruka=1
staviIntNaSistemskiStog brojac
staviStringNaSistemskiStog unutrasnjaPetljaString
call [printf]
;Inline assembly ended.
;n*ln(n)/ln(2) ;Ovo ce se spremiti u "result", pomocnu varijablu koju koristi compiler za AEC.
finit
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld dword [n]
fxch
fmulp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fdivp st1,st0
fstp dword [result]
;Inline assembly begins.
fld dword [result]
fstp qword [esp] ;"printf" iz MSVCRT-a za "%f" ocekuje 64-bitni "double", ili, na asemblerskom jeziku, "qword".
staviStringNaSistemskiStog slozenostString
call [printf]
push dword [procesorskoVrijeme]
invoke printf,sortiranjeJeTrajalo
invoke system,_pause
end if
invoke exit,0

;"Konstante", ako njih pokusamo mijenjati, dobijemo Segmentation Fault:
_pause db "PAUSE",0
znakZaCijeliBrojBroj db "%d",0
znakZaNoviRedPlusNulZnak db 10,0
znakZaFloatPlusNoviRedPlusNulZnak db "%f",10,0
unutrasnjaPetljaString db "Unutrasnja petlja izvrsila se %d puta.",10,0
slozenostString db "Ocekivani broj ponavljanja te petlje, po formuli n*log2(n), bio bi %.1f.",10,0
sortiranjeJeTrajalo db "Sortiranje je trajalo %d milisekundi.",10,0
razdvajati dd 0f
spajati dd 1f

section '.rdata' readable writable ;Varijable i polja (u drugom segmentu programa nego sto je izvrsni dio).
original:
repeat 32768 ;Nije preporucljivo ovako na asemblerskom deklarirati nizove, ali zasto bih se pretvarao da radim za racunalom s 4 MB RAM-a, gdje je problem ucitati program gdje je jedan segment velik 640 KB?
dd 0
end repeat
n dd ?
result dd ?
brojac dd ?
pokazivac dd ?
i dd ?
stogSDonjimGranicama:
repeat 32768
dd 0
end repeat
stogSGornjimGranicama:
repeat 32768
dd 0
end repeat
pomocni:
repeat 32768
dd 0
end repeat
vrhStoga dd ?
donjaGranica dd ?
gornjaGranica dd ?
staviVece dd ?
staviManje dd ?
gdjeJePivot dd ?
procesorskoVrijeme dd ?
razvrstanost dd ?
razvrstanostNa dd 8 DUP(?)
polinomPodApsolutnom dd ?
eNaKoju dd ?
kolikoUsporedbiOcekujemoOdQuickSorta dd ?
kolikoUsporedbiOcekujemoOdMergeSorta dd ?
najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac dd ?
pomocniBrojac dd ?
testZaPreljev dd ?
gdjeSmoUDrugomNizu dd ?
gdjeSmoUPrvomNizu dd ?
trebaLiSpajatiIliRazdvajati dd ?
sredinaNiza dd ?
stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove:
repeat 32768
dd 0
end repeat


section '.idata' data readable import
library msvcrt,'msvcrt.dll' ;"msvcrt.dll" je Microsoft Visual C Runtime Library, dostupna u "C:\Windows\System32\msvcrt.dll" na Windows 98 i novijim.
import msvcrt,printf,'printf',system,'system',exit,'exit',scanf,'scanf',clock,'clock'
;Inline assembly ended.
