;Generated by ArithmeticExpressionCompiler ( https://flatassembler.github.io/compiler.html ) run in NodeJS.
;;Implementacija MergeSorta u AEC-u.
;AsmStart
;Inline assembly begins.
ispisPoruka=1
macro staviIntNaSistemskiStog x
{
sub esp,4
fld dword [x]
fistp dword [esp]
}
macro staviPokazivacNaSistemskiStog x
{
sub esp,4
lea ebx,[x]
mov [esp],ebx
}
macro staviStringNaSistemskiStog x
{
sub esp,4
mov dword [esp],x
}
format PE console
entry start

include 'win32a.inc'

section '.text' code executable
start:
if ispisPoruka=1
jmp velicinaUnosa$
velicinaUnosa db "Unesite koliko cete brojeva unijeti.",10,0
velicinaUnosa$:
staviStringNaSistemskiStog velicinaUnosa
call [printf]
end if
staviPokazivacNaSistemskiStog n
jmp znakZaFloat$
znakZaFloat db "%f",0
znakZaFloat$:
staviStringNaSistemskiStog znakZaFloat
call [scanf]
if ispisPoruka=1
jmp pitajZaUnos$
pitajZaUnos db "Unesite te brojeve:",10,0
pitajZaUnos$:
staviStringNaSistemskiStog pitajZaUnos
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;vrhStoga:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;While i<n
finit
WhileLabel245451:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel535848
fld1
jmp endOfTheLessThanComparisonLabel853881
secondOperandOfTheComparisonIsSmallerOrEqualLabel535848:
fldz
endOfTheLessThanComparisonLabel853881:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel902916
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
fld dword [i]
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;AsmStart
;Inline assembly begins.
fld dword [pokazivac]
fistp dword [pokazivac]
lea ebx,[original]
add ebx,[pokazivac]
staviPokazivacNaSistemskiStog ebx
staviStringNaSistemskiStog znakZaFloat
call [scanf]
;AsmEnd
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel245451
EndWhileLabel902916:
;AsmStart
;Inline assembly begins.
call [clock]
mov [procesorskoVrijeme],eax
;AsmEnd
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;While vrhStoga>0
finit
WhileLabel538128:
fld dword [vrhStoga]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterOrEqualLabel474435
fld1
jmp endOfTheGreaterThanComparisonLabel751514
secondOperandOfTheComparisonIsGreaterOrEqualLabel474435:
fldz
endOfTheGreaterThanComparisonLabel751514:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel774331
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [donjaGranica],edx
;trebaLiSpajatiIliRazdvajati:=stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
fld dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [trebaLiSpajatiIliRazdvajati],edx
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fsubp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;sredinaNiza:=(donjaGranica+gornjaGranica)/2
finit
fld dword [donjaGranica]
fld dword [gornjaGranica]
faddp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fdivp
fstp dword [result]
mov edx, dword [result]
mov dword [sredinaNiza],edx
;sredinaNiza:=sredinaNiza-mod(sredinaNiza,1) ;Kada u svoj jezik nisam ugradio "floor" naredbu.
finit
fld dword [sredinaNiza]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
fld dword [sredinaNiza]
fxch
fsubp
fstp dword [result]
mov edx, dword [result]
mov dword [sredinaNiza],edx
;If trebaLiSpajatiIliRazdvajati=0 ;Razdvajanje niza u dva priblizno jednaka, njihova granica ce biti "sredinaNiza" (ona ce pripadati drugom nizu, a sve do nje prvom nizu).
finit
fld dword [trebaLiSpajatiIliRazdvajati]
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel162848
fld1
jmp endOfTheEqualityOperatorLabel135196
operandsOfTheEqualityOperatorAreNotEqualLabel162848:
fldz
endOfTheEqualityOperatorLabel135196:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel395839
;If gornjaGranica-donjaGranica>1 ;Niz velicine 1 ili 0 uvijek je poredan, i ne trebamo nista dalje raditi.
finit
fld dword [gornjaGranica]
fld dword [donjaGranica]
fsubp
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fcomip st1
fstp dword [result]
jnb secondOperandOfTheComparisonIsGreaterOrEqualLabel108738
fld1
jmp endOfTheGreaterThanComparisonLabel876904
secondOperandOfTheComparisonIsGreaterOrEqualLabel108738:
fldz
endOfTheGreaterThanComparisonLabel876904:
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel135179
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=1 ;Nakon sto smo poredali ta dva niza, trebamo ih spojiti.
finit
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;;Podatak o sadasnjim granicama stavljamo prvi na stog kako bi bio zadnji izvaden sa stoga.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx, dword [result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;EndIf
finit
ElseLabel135179:
EndIfLabel817429:
;Else ;Spajanje dva poredana niza u treci poredani niz, gdje prvi niz ima granice "donjaGranica" i "sredinaNiza", a drugi "sredinaNiza" i "gornjaGranica".
finit
jmp EndIfLabel645460
ElseLabel395839:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;gdjeSmoUPrvomNizu:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUPrvomNizu],edx
;gdjeSmoUDrugomNizu:=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUDrugomNizu],edx
;While i<gornjaGranica
finit
WhileLabel860180:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel360075
fld1
jmp endOfTheLessThanComparisonLabel255698
secondOperandOfTheComparisonIsSmallerOrEqualLabel360075:
fldz
endOfTheLessThanComparisonLabel255698:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel235705
;If (gdjeSmoUPrvomNizu=sredinaNiza | original(gdjeSmoUDrugomNizu)<original(gdjeSmoUPrvomNizu)) & gdjeSmoUDrugomNizu<gornjaGranica
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel90838
fld1
jmp endOfTheLessThanComparisonLabel879858
secondOperandOfTheComparisonIsSmallerOrEqualLabel90838:
fldz
endOfTheLessThanComparisonLabel879858:
fld dword [gdjeSmoUPrvomNizu]
fld dword [sredinaNiza]
fcomip st1
fstp dword [result]
jne operandsOfTheEqualityOperatorAreNotEqualLabel766483
fld1
jmp endOfTheEqualityOperatorLabel685841
operandsOfTheEqualityOperatorAreNotEqualLabel766483:
fldz
endOfTheEqualityOperatorLabel685841:
fxch
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
or dword [result],eax
fild dword [result]
fld dword [gdjeSmoUDrugomNizu]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel609630
fld1
jmp endOfTheLessThanComparisonLabel552444
secondOperandOfTheComparisonIsSmallerOrEqualLabel609630:
fldz
endOfTheLessThanComparisonLabel552444:
fistp dword [result]
mov eax,dword [result]
fistp dword [result]
and dword [result],eax
fild dword [result]
fistp dword [result]
mov eax, dword [result]
test eax,eax
jz ElseLabel607994
;pomocni(i):=original(gdjeSmoUDrugomNizu)
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;gdjeSmoUDrugomNizu:=gdjeSmoUDrugomNizu+1
finit
fld dword [gdjeSmoUDrugomNizu]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUDrugomNizu],edx
;Else
finit
jmp EndIfLabel907456
ElseLabel607994:
;pomocni(i):=original(gdjeSmoUPrvomNizu)
finit
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx, dword [result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [pomocni+4*ebx],edx
;gdjeSmoUPrvomNizu:=gdjeSmoUPrvomNizu+1
finit
fld dword [gdjeSmoUPrvomNizu]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUPrvomNizu],edx
;EndIf
finit
EndIfLabel907456:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp WhileLabel860180
EndWhileLabel235705:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
WhileLabel400087:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel415884
fld1
jmp endOfTheLessThanComparisonLabel453641
secondOperandOfTheComparisonIsSmallerOrEqualLabel415884:
fldz
endOfTheLessThanComparisonLabel453641:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel436669
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx, dword [result]
mov dword [original+4*ebx],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel400087
EndWhileLabel436669:
;EndIf
finit
EndIfLabel645460:
;EndWhile
finit
jmp WhileLabel538128
EndWhileLabel774331:
;AsmStart
;Inline assembly begins.
call [clock]
sub eax,[procesorskoVrijeme]
mov [procesorskoVrijeme],eax
if ispisPoruka=1
jmp sortiraniNizJe$
sortiraniNizJe db "Sortirani niz je:",10,0
sortiraniNizJe$:
staviStringNaSistemskiStog sortiraniNizJe
call [printf]
end if
;AsmEnd
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;IEEE754 hex of 0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
WhileLabel299387:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna secondOperandOfTheComparisonIsSmallerOrEqualLabel628808
fld1
jmp endOfTheLessThanComparisonLabel63001
secondOperandOfTheComparisonIsSmallerOrEqualLabel628808:
fldz
endOfTheLessThanComparisonLabel63001:
fistp dword [result]
mov eax, dword [result]
test eax,eax
je EndWhileLabel446950
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;IEEE754 hex of 4
fld dword [result]
fld dword [i]
fmulp
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;AsmStart
;Inline assembly begins.
lea ebx,[original]
fld dword [pokazivac]
fistp dword [pokazivac]
add ebx,[pokazivac]
fld dword [ebx]
fstp qword [esp]
staviStringNaSistemskiStog znakZaFloatPlusNoviRedPlusNulZnak
call [printf]
;AsmEnd
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3f800000 ;IEEE754 hex of 1
fld dword [result]
faddp
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp WhileLabel299387
EndWhileLabel446950:
;AsmStart
;Inline assembly begins.
if ispisPoruka=1
staviIntNaSistemskiStog brojac
staviStringNaSistemskiStog unutrasnjaPetljaString
call [printf]
;AsmEnd
;Inline assembly ended.
;brojac:=2*n*ln(n)/ln(2)
finit
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fld dword [n]
fmulp
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp
fmulp
mov dword [result],0x40000000 ;IEEE754 hex of 2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp
fdivp
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;AsmStart
;Inline assembly begins.
fld dword [brojac]
fstp qword [esp]
staviStringNaSistemskiStog slozenostString
call [printf]
push dword [procesorskoVrijeme]
invoke printf,sortiranjeJeTrajalo
invoke system,_pause
end if
invoke exit,0

_pause db "PAUSE",0
znakZaCijeliBrojBroj db "%d",0
znakZaNoviRedPlusNulZnak db 10,0
znakZaFloatPlusNoviRedPlusNulZnak db "%f",10,0
unutrasnjaPetljaString db "Unutrasnja petlja izvrsila se %d puta.",10,0
slozenostString db "Ocekivani broj ponavljanja te petlje, po formuli 2*n*log2(n), bio bi %.1f.",10,0
sortiranjeJeTrajalo db "Sortiranje je trajalo %d milisekundi.",10,0


section '.rdata' readable writable
original dd 32768*4 DUP(?)
n dd ?
result dd ?
brojac dd ?
pokazivac dd ?
i dd ?
stogSDonjimGranicama dd 32768*4 DUP(?)
stogSGornjimGranicama dd 32768*4 DUP(?)
stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove dd 32768*4 DUP(?)
pomocni dd 32768*4 DUP(?)
vrhStoga dd ?
donjaGranica dd ?
gornjaGranica dd ?
sredinaNiza dd ?
gdjeSmoUDrugomNizu dd ?
gdjeSmoUPrvomNizu dd ?
trebaLiSpajatiIliRazdvajati dd ?
procesorskoVrijeme dd ?

section '.idata' data readable import
library msvcrt,'msvcrt.dll'
import msvcrt,printf,'printf',system,'system',exit,'exit',scanf,'scanf',clock,'clock'
;AsmEnd
;Inline assembly ended.
