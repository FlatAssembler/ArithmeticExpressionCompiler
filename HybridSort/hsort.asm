;Generated by Arithmetic Expression Compiler (http://flatassembler.000webhostapp.com/compiler.html) run in Duktape.
;;HybridSort algoritam - kombinacija QuickSort algoritma i MergeSort algoritma.
;Inline assembly begins.
ispisPoruka=1
macro staviIntNaSistemskiStog x ;"x" treba biti pokazivac na 32-bitni decimalni broj ("float"), kojeg ce ova makro-naredba pretvoriti u 32-bitni cijeli broj ("int") i staviti na sistemski stog.
{
sub esp,4
fld dword [x]
fistp dword [esp]
}
macro staviPokazivacNaSistemskiStog x
{
sub esp,4
lea ebx,[x]
mov [esp],ebx
}
macro staviStringNaSistemskiStog x
{
sub esp,4
mov dword [esp],x
}
format PE console ;"PE" je 32-bitna Windowsova ".EXE" datoteka (to nije sve sto FlatAssembler moze stvarati).
entry start

include 'win32a.inc' ;FlatAssemblerove naredbe za upravljanje DLL-ovima (ovdje se koriste za pozivanje C-ovih  funkcija iz MSVCRT-a).

section '.text' code executable
start:
if ispisPoruka=1
jmp velicinaUnosa$
velicinaUnosa db "Unesite koliko cete brojeva unijeti.",10,0
velicinaUnosa$:
staviStringNaSistemskiStog velicinaUnosa
call [printf]
end if
staviPokazivacNaSistemskiStog n
jmp znakZaFloat$
znakZaFloat db "%f",0
znakZaFloat$:
staviStringNaSistemskiStog znakZaFloat
call [scanf]
if ispisPoruka=1
jmp pitajZaUnos$
pitajZaUnos db "Unesite te brojeve:",10,0
pitajZaUnos$:
staviStringNaSistemskiStog pitajZaUnos
call [printf]
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;vrhStoga:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;While i<n
finit
l953658:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l183837
fld1
jmp l397148
l183837:
fldz
l397148:
fistp dword [result]
mov eax,[result]
test eax,eax
je l668742
;pokazivac:=4*i ;"float" ima 4 bajta.
finit
mov dword [result],0x40800000 ;4
fld dword [result]
fld dword [i]
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;Inline assembly begins.
fld dword [pokazivac]
fistp dword [pokazivac]
lea ebx,[original]
add ebx,[pokazivac]
staviPokazivacNaSistemskiStog ebx
staviStringNaSistemskiStog znakZaFloat
call [scanf]
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l953658
l668742:
;Inline assembly begins.
call [clock] ;"clock" na Windowsima vraca broj milisekundi otkad se program pokrenuo, zadnja 32 bita vraca u procesorski registar "eax".
mov [procesorskoVrijeme],eax
;Inline assembly ended.
;razvrstanost:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n-1
finit
l784021:
fld dword [n]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fld dword [i]
fxch
fcomip st1
fstp dword [result]
jna l838275
fld1
jmp l494064
l838275:
fldz
l494064:
fistp dword [result]
mov eax,[result]
test eax,eax
je l718765
;razvrstanost:=razvrstanost+(original(i)<original(i+1))
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fxch
fcomip st1
fstp dword [result]
jna l897080
fld1
jmp l498414
l897080:
fldz
l498414:
fld dword [razvrstanost]
fxch
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp l784021
l718765:
;razvrstanost:=razvrstanost/((n-1)/2)-1
finit
fld dword [n]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fdivp st1,st0
fld dword [razvrstanost]
fxch
fdivp st1,st0
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [razvrstanost],edx
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceORazvrstanosti$
izvjesceORazvrstanosti db "Razvrstanost pocetnog niza iznosi: %f",10,0
izvjesceORazvrstanosti$:
fld dword [razvrstanost]
fstp qword [esp]
staviStringNaSistemskiStog izvjesceORazvrstanosti
call [printf]
end if
;Inline assembly ended.
;i:=2
finit
mov dword [result],0x40000000 ;2
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<7 | i=7 
finit
l629470:
fld dword [i]
mov dword [result],0x40E00000 ;7
fld dword [result]
fcomip st1
fstp dword [result]
jna l147864
fld1
jmp l602362
l147864:
fldz
l602362:
fld dword [i]
mov dword [result],0x40E00000 ;7
fld dword [result]
fcomip st1
fstp dword [result]
jne l811866
fld1
jmp l232226
l811866:
fldz
l232226:
fistp dword [result]
mov eax,[result]
fistp dword [result]
or [result],eax
fild dword [result]
fistp dword [result]
mov eax,[result]
test eax,eax
je l709769
;razvrstanostNa(i):=pow(abs(razvrstanost),i) ;"pow(x,y)" je u AEC-u samo sintaksni secer za "exp(ln(x)*y)", i to vraca NaN za x=0 ili x<0. Nema ocitog nacina da se "pow(x,y)" prevede na asemblerski.
finit
fld dword [razvrstanost]
fabs
fld dword [i]
fxch
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fmulp st1,st0
fldl2e
fmulp st1,st0
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp st1,st0
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [razvrstanostNa+4*ebx],edx
;If razvrstanost=0
finit
fld dword [razvrstanost]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jne l279726
fld1
jmp l224178
l279726:
fldz
l224178:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l494152
;razvrstanostNa(i):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [razvrstanostNa+4*ebx],edx
;EndIf
finit
l494152:
l501757:
;If mod(i,2)=1 & razvrstanost<0
finit
fld dword [i]
mov dword [result],0x40000000 ;2
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
mov dword [result],0x3F800000 ;1
fld dword [result]
fcomip st1
fstp dword [result]
jne l618930
fld1
jmp l74399
l618930:
fldz
l74399:
fld dword [razvrstanost]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jna l844089
fld1
jmp l622357
l844089:
fldz
l622357:
fistp dword [result]
mov eax,[result]
fistp dword [result]
and [result],eax
fild dword [result]
fistp dword [result]
mov eax,[result]
test eax,eax
jz l824085
;razvrstanostNa(i):=-razvrstanostNa(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x0 ;0
fld dword [result]
fxch
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [razvrstanostNa+4*ebx],edx
;EndIf
finit
l824085:
l693488:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l629470
l709769:
;;Formula koju je ispisao genetski algoritam za predvidanje koliko ce usporedbi QuickSort napraviti: https://github.com/FlatAssembler/ArithmeticExpressionCompiler/tree/master/QuickSort/Genetic_algorithm_for_deriving_the_formula
;polinomPodApsolutnom:=2.38854*razvrstanostNa(7)-0.284258*razvrstanostNa(6)-1.87104*razvrstanostNa(5)+0.372637*razvrstanostNa(4)+0.167242*razvrstanostNa(3)-0.0884977*razvrstanostNa(2)+0.315119*razvrstanost
finit
mov dword [result],0x40E00000 ;7
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x4018DDD7 ;2.38854
fld dword [result]
fxch
fmulp st1,st0
mov dword [result],0x40C00000 ;6
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3E918A44 ;0.284258
fld dword [result]
fxch
fmulp st1,st0
fsubp st1,st0
mov dword [result],0x40A00000 ;5
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3FEF7E3D ;1.87104
fld dword [result]
fxch
fmulp st1,st0
fsubp st1,st0
mov dword [result],0x40800000 ;4
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3EBECA47 ;0.372637
fld dword [result]
fxch
fmulp st1,st0
faddp st1,st0
mov dword [result],0x40400000 ;3
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3E2B417D ;0.167242
fld dword [result]
fxch
fmulp st1,st0
faddp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fistp dword [result]
mov ebx,[result]
fld dword [razvrstanostNa+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
mov dword [result],0x3DB53E48 ;0.0884977
fld dword [result]
fxch
fmulp st1,st0
fsubp st1,st0
mov dword [result],0x3EA15747 ;0.315119
fld dword [result]
fld dword [razvrstanost]
fmulp st1,st0
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [polinomPodApsolutnom],edx
;eNaKoju:=(ln(n)+ln(ln(n)))*1.05+(ln(n)-ln(ln(n)))*0.83*abs(polinomPodApsolutnom)
finit
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fxch
fsubp st1,st0
mov dword [result],0x3F547AE1 ;0.83
fld dword [result]
fmulp st1,st0
fld dword [polinomPodApsolutnom]
fabs
fmulp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fxch
faddp st1,st0
mov dword [result],0x3F866666 ;1.05
fld dword [result]
fmulp st1,st0
fxch
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [eNaKoju],edx
;kolikoUsporedbiOcekujemoOdQuickSorta:=exp(eNaKoju)
finit
fld dword [eNaKoju]
fldl2e
fmulp st1,st0
fld1
fscale
fxch
fld1
fxch
fprem
f2xm1
faddp st1,st0
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [kolikoUsporedbiOcekujemoOdQuickSorta],edx
;kolikoUsporedbiOcekujemoOdMergeSorta:=2*n*ln(n)/ln(2)
finit
mov dword [result],0x40000000 ;2
fld dword [result]
fld dword [n]
fmulp st1,st0
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fmulp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fdivp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [kolikoUsporedbiOcekujemoOdMergeSorta],edx
;Inline assembly begins.
if ispisPoruka=1
jmp ispisOTomeStoOcekujemo$
ispisOTomeStoOcekujemo db "Od QuickSorta ocekujemo %f usporedbi, a od MergeSorta ocekujemo %f usporedbi.",10,0
ispisOTomeStoOcekujemo$:
fld dword [kolikoUsporedbiOcekujemoOdMergeSorta]
fstp qword [esp+8]
fld dword [kolikoUsporedbiOcekujemoOdQuickSorta]
fstp qword [esp]
staviStringNaSistemskiStog ispisOTomeStoOcekujemo
call [printf]
end if
;Inline assembly ended.
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=1 ;Da ne prijedemo MAX_SAFE_INT za "float".
finit
mov dword [result],0x3F800000 ;1
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;pomocniBrojac:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;If razvrstanost=1
finit
fld dword [razvrstanost]
mov dword [result],0x3F800000 ;1
fld dword [result]
fcomip st1
fstp dword [result]
jne l821748
fld1
jmp l550802
l821748:
fldz
l550802:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l525787
;Inline assembly begins.
if ispisPoruka=1
jmp nizJeVecRazvrstan$
nizJeVecRazvrstan db "Niz je vec poredan, ne radimo nista.",10,0
nizJeVecRazvrstan$:
invoke printf,nizJeVecRazvrstan
end if
;Inline assembly ended.
;ElseIf razvrstanost=(-1) ;Da, parser od AEC-a jos nije savrsen i javlja gresku za "razvrstanost=-1".
finit
jmp l391821
l525787:
mov dword [result],0x0 ;0
fld dword [result]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fld dword [razvrstanost]
fxch
fcomip st1
fstp dword [result]
jne l530351
fld1
jmp l53146
l530351:
fldz
l53146:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l959845
;Inline assembly begins.
if ispisPoruka=1
jmp nizJeObrnutoRazvrstan$
nizJeObrnutoRazvrstan db "Niz je obrnuto poredan.",10,0
nizJeObrnutoRazvrstan$:
invoke printf,nizJeObrnutoRazvrstan
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
l208194:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l870940
fld1
jmp l132645
l870940:
fldz
l132645:
fistp dword [result]
mov eax,[result]
test eax,eax
je l470139
;pomocni(i):=original(n-i-1)
finit
fld dword [n]
fld dword [i]
fsubp st1,st0
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp l208194
l470139:
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
l825992:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l855015
fld1
jmp l224563
l855015:
fldz
l224563:
fistp dword [result]
mov eax,[result]
test eax,eax
je l217765
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [original+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l825992
l217765:
;ElseIf kolikoUsporedbiOcekujemoOdQuickSorta<kolikoUsporedbiOcekujemoOdMergeSorta
finit
jmp l391821
l959845:
fld dword [kolikoUsporedbiOcekujemoOdQuickSorta]
fld dword [kolikoUsporedbiOcekujemoOdMergeSorta]
fcomip st1
fstp dword [result]
jna l819659
fld1
jmp l142477
l819659:
fldz
l142477:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l589191
;Inline assembly begins.
if ispisPoruka=1
jmp radimoQuickSort$
radimoQuickSort db "Primijenit cemo QuickSort algoritam.",10,0
radimoQuickSort$:
invoke printf,radimoQuickSort
end if
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;While vrhStoga>0
finit
l39236:
fld dword [vrhStoga]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jnb l890669
fld1
jmp l365336
l890669:
fldz
l365336:
fistp dword [result]
mov eax,[result]
test eax,eax
je l856176
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [donjaGranica],edx
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;gdjeJePivot:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeJePivot],edx
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
l106188:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l537516
fld1
jmp l125023
l537516:
fldz
l125023:
fistp dword [result]
mov eax,[result]
test eax,eax
je l767212
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna l557972
fld1
jmp l442963
l557972:
fldz
l442963:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l958145
;gdjeJePivot:=gdjeJePivot+1 ;Gdje ce doci element koji je sada prvi ("pivot").
finit
fld dword [gdjeJePivot]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeJePivot],edx
;EndIf
finit
l958145:
l296369:
;i:=i++ ;"++" je u AEC-u jednostavno sintaksni secer za "+1".
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l106188
l767212:
;staviManje:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [staviManje],edx
;staviVece:=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [staviVece],edx
;pomocni(gdjeJePivot):=original(donjaGranica)
finit
fld dword [donjaGranica]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [gdjeJePivot]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;i:=donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica ;Preuredi niz original(donjaGranica..gornjaGranica-1) tako da svi elementi koji su manji od onoga koji je bio prvi dodu prije njega.
finit
l854533:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l827489
fld1
jmp l673478
l827489:
fldz
l673478:
fistp dword [result]
mov eax,[result]
test eax,eax
je l910960
;If original(i)<original(donjaGranica)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [donjaGranica]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna l832413
fld1
jmp l359809
l832413:
fldz
l359809:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l302927
;pomocni(staviManje):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [staviManje]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;staviManje:=staviManje+1
finit
fld dword [staviManje]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [staviManje],edx
;Else
finit
jmp l794744
l302927:
;pomocni(staviVece):=original(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [staviVece]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;staviVece:=staviVece+1
finit
fld dword [staviVece]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [staviVece],edx
;EndIf
finit
l794744:
;pomocniBrojac:=pomocniBrojac+1
finit
fld dword [pomocniBrojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;If pomocniBrojac=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac
finit
fld dword [pomocniBrojac]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
fcomip st1
fstp dword [result]
jne l347264
fld1
jmp l614548
l347264:
fldz
l614548:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l963488
;brojac:=brojac+pomocniBrojac
finit
fld dword [brojac]
fld dword [pomocniBrojac]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;pomocniBrojac:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [pomocniBrojac],edx
;EndIf
finit
l963488:
l641663:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l854533
l910960:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
l563688:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l309378
fld1
jmp l945519
l309378:
fldz
l945519:
fistp dword [result]
mov eax,[result]
test eax,eax
je l372753
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [original+4*ebx],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l563688
l372753:
;;Razdvoji niz original(donjaGranica..gornjaGranica-1) na nizove original(donjaGranica..gdjeJePivot-1) i original(gdjeJePivot+1..gornjaGranica-1).
;;Znamo gdje je pivot, pa njega ne trebamo ukljuciti ni u jedan od tih nizova.
;;I ne trebamo na stog stavljati naputke o razvrstavanju nizova velicine 0 ili 1.
;If gdjeJePivot<gornjaGranica-1
finit
fld dword [gornjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jna l521610
fld1
jmp l862646
l521610:
fldz
l862646:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l814696
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=gdjeJePivot+1
finit
fld dword [gdjeJePivot]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
finit
l814696:
l117853:
;If gdjeJePivot>donjaGranica+1
finit
fld dword [donjaGranica]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fld dword [gdjeJePivot]
fxch
fcomip st1
fstp dword [result]
jnb l116237
fld1
jmp l297024
l116237:
fldz
l297024:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l605245
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gdjeJePivot
finit
fld dword [gdjeJePivot]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;EndIf
finit
l605245:
l346323:
;testZaPreljev:=brojac+najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac ;Potrebna je posebna varijabla za to jer FPU interno radi s 80-bitnim brojevima, a CPU s 32-bitnim. Izgubio sam hrpu vremena da to shvatim.
finit
fld dword [brojac]
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [testZaPreljev],edx
;If not(testZaPreljev>brojac)
finit
fld dword [testZaPreljev]
fld dword [brojac]
fcomip st1
fstp dword [result]
jnb l139176
fld1
jmp l639572
l139176:
fldz
l639572:
fld1
fxch
fsubp st1,st0
fistp dword [result]
mov eax,[result]
test eax,eax
jz l447308
;najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac:=najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac*2
finit
fld dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac]
mov dword [result],0x40000000 ;2
fld dword [result]
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac],edx
;Inline assembly begins.
if ispisPoruka=1
jmp izvjesceOpreljevu$
izvjesceOpreljevu db "Upozorenje: Brojac mozda nece sadrzavati tocan rezultat, dogodio se preljev na %d. iteraciji."
db " Najveca ocekivana pogreska za ovaj preljev je %d krivo prebrojanih izvrsavanja unutarnje petlje.",10,0
izvjesceOpreljevu$:
fld dword [gornjaGranica]
fld dword [donjaGranica]
fsubp
fabs
fistp dword [esp+4]
fld dword [brojac]
fistp dword [esp]
invoke printf,izvjesceOpreljevu
end if      
;Inline assembly ended.
;EndIf
finit
l447308:
l189324:
;EndWhile
finit
jmp l39236
l856176:
;Else
finit
jmp l391821
l589191:
;Inline assembly begins.
if ispisPoruka=1
jmp radimoMergeSort$
radimoMergeSort db "Primijenit cemo MergeSort algoritam.",10,0
radimoMergeSort$:
invoke printf,radimoMergeSort
end if
;Inline assembly ended.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=n
finit
fld dword [n]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
finit
fld dword [razdvajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;While vrhStoga>0
finit
l365558:
fld dword [vrhStoga]
mov dword [result],0x0 ;0
fld dword [result]
fcomip st1
fstp dword [result]
jnb l611908
fld1
jmp l138615
l611908:
fldz
l138615:
fistp dword [result]
mov eax,[result]
test eax,eax
je l571324
;gornjaGranica:=stogSGornjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSGornjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [gornjaGranica],edx
;donjaGranica:=stogSDonjimGranicama(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSDonjimGranicama+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [donjaGranica],edx
;trebaLiSpajatiIliRazdvajati:=stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga)
finit
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
fld dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
mov dword [trebaLiSpajatiIliRazdvajati],edx
;vrhStoga:=vrhStoga-1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;sredinaNiza:=(donjaGranica+gornjaGranica)/2
finit
fld dword [donjaGranica]
fld dword [gornjaGranica]
faddp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fdivp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [sredinaNiza],edx
;sredinaNiza:=sredinaNiza-mod(sredinaNiza,1)
finit
fld dword [sredinaNiza]
mov dword [result],0x3F800000 ;1
fld dword [result]
fxch
fprem
fxch
fstp dword [result]
fld dword [sredinaNiza]
fxch
fsubp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [sredinaNiza],edx
;If trebaLiSpajatiIliRazdvajati=razdvajati ;Razdvoji niz original(donjaGranica..gornjaGranica-1) na original(donjaGranica..sredinaNiza-1) i original(sredinaNiza..gornjaGranica-1).
finit
fld dword [trebaLiSpajatiIliRazdvajati]
fld dword [razdvajati]
fcomip st1
fstp dword [result]
jne l643902
fld1
jmp l132974
l643902:
fldz
l132974:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l519762
;If gornjaGranica-donjaGranica>1 ;Niz velicine 0 ili 1 vec je poredan i ne radimo nista dalje.
finit
fld dword [gornjaGranica]
fld dword [donjaGranica]
fsubp st1,st0
mov dword [result],0x3F800000 ;1
fld dword [result]
fcomip st1
fstp dword [result]
jnb l597791
fld1
jmp l677962
l597791:
fldz
l677962:
fistp dword [result]
mov eax,[result]
test eax,eax
jz l218194
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=spajati
finit
fld dword [spajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;;Stavljamo naputak za spajanje nizova prvog na stog kako bi on onda bio zadnji izvaden iz njega.
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
finit
fld dword [razdvajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;vrhStoga:=vrhStoga+1
finit
fld dword [vrhStoga]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [vrhStoga],edx
;stogSDonjimGranicama(vrhStoga):=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSDonjimGranicama+4*ebx],edx
;stogSGornjimGranicama(vrhStoga):=gornjaGranica
finit
fld dword [gornjaGranica]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSGornjimGranicama+4*ebx],edx
;stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove(vrhStoga):=razdvajati
finit
fld dword [razdvajati]
fstp dword [result]
mov edx, dword [result]
fld dword [vrhStoga]
fistp dword [result]
mov ebx,[result]
mov dword [stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove+4*ebx],edx
;EndIf
finit
l218194:
l901147:
;Else ;Spoji vec poredane nizove original(donjaGranica..sredinaNiza-1) i original(sredinaNiza..gornjaGranica-1) u novi poredani niz original(donjaGranica..gornjaGranica-1).
finit
jmp l473764
l519762:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;gdjeSmoUPrvomNizu:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUPrvomNizu],edx
;gdjeSmoUDrugomNizu:=sredinaNiza
finit
fld dword [sredinaNiza]
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUDrugomNizu],edx
;While i<gornjaGranica
finit
l951279:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l907039
fld1
jmp l272561
l907039:
fldz
l272561:
fistp dword [result]
mov eax,[result]
test eax,eax
je l23060
;If (gdjeSmoUPrvomNizu=sredinaNiza | original(gdjeSmoUDrugomNizu)<original(gdjeSmoUPrvomNizu)) & gdjeSmoUDrugomNizu<gornjaGranica
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fcomip st1
fstp dword [result]
jna l464817
fld1
jmp l14963
l464817:
fldz
l14963:
fld dword [gdjeSmoUPrvomNizu]
fld dword [sredinaNiza]
fcomip st1
fstp dword [result]
jne l601037
fld1
jmp l773336
l601037:
fldz
l773336:
fxch
fistp dword [result]
mov eax,[result]
fistp dword [result]
or [result],eax
fild dword [result]
fld dword [gdjeSmoUDrugomNizu]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l853185
fld1
jmp l797980
l853185:
fldz
l797980:
fistp dword [result]
mov eax,[result]
fistp dword [result]
and [result],eax
fild dword [result]
fistp dword [result]
mov eax,[result]
test eax,eax
jz l890679
;pomocni(i):=original(gdjeSmoUDrugomNizu)
finit
fld dword [gdjeSmoUDrugomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;gdjeSmoUDrugomNizu:=gdjeSmoUDrugomNizu+1
finit
fld dword [gdjeSmoUDrugomNizu]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUDrugomNizu],edx
;Else
finit
jmp l305641
l890679:
;pomocni(i):=original(gdjeSmoUPrvomNizu)
finit
fld dword [gdjeSmoUPrvomNizu]
fistp dword [result]
mov ebx,[result]
fld dword [original+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [pomocni+4*ebx],edx
;gdjeSmoUPrvomNizu:=gdjeSmoUPrvomNizu+1
finit
fld dword [gdjeSmoUPrvomNizu]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [gdjeSmoUPrvomNizu],edx
;EndIf
finit
l305641:
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;EndWhile
finit
jmp l951279
l23060:
;i:=donjaGranica
finit
fld dword [donjaGranica]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<gornjaGranica
finit
l58903:
fld dword [i]
fld dword [gornjaGranica]
fcomip st1
fstp dword [result]
jna l963057
fld1
jmp l954265
l963057:
fldz
l954265:
fistp dword [result]
mov eax,[result]
test eax,eax
je l461421
;original(i):=pomocni(i)
finit
fld dword [i]
fistp dword [result]
mov ebx,[result]
fld dword [pomocni+4*ebx] ;In case the program is supposed to be 16-bit, simply replace 'ebx' with 'bx'. In case it's 64-bit, replace the 'mov' in the last directive with 'movsx' and 'ebx' with 'rbx' in both this and the last directive.
fstp dword [result]
mov edx, dword [result]
fld dword [i]
fistp dword [result]
mov ebx,[result]
mov dword [original+4*ebx],edx
;brojac:=brojac+1
finit
fld dword [brojac]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [brojac],edx
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l58903
l461421:
;EndIf
finit
l473764:
;EndWhile
finit
jmp l365558
l571324:
;EndIf
finit
l391821:
;Inline assembly begins.
call [clock]
sub eax,[procesorskoVrijeme]
mov [procesorskoVrijeme],eax
if ispisPoruka=1
jmp sortiraniNizJe$
sortiraniNizJe db "Sortirani niz je:",10,0
sortiraniNizJe$:
staviStringNaSistemskiStog sortiraniNizJe
call [printf]
end if
;Inline assembly ended.
;i:=0
finit
mov dword [result],0x0 ;0
fld dword [result]
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;While i<n
finit
l21143:
fld dword [i]
fld dword [n]
fcomip st1
fstp dword [result]
jna l331004
fld1
jmp l572986
l331004:
fldz
l572986:
fistp dword [result]
mov eax,[result]
test eax,eax
je l989379
;pokazivac:=4*i
finit
mov dword [result],0x40800000 ;4
fld dword [result]
fld dword [i]
fmulp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [pokazivac],edx
;Inline assembly begins.
lea ebx,[original]
fld dword [pokazivac]
fistp dword [pokazivac]
add ebx,[pokazivac]
fld dword [ebx]
fstp qword [esp]
staviStringNaSistemskiStog znakZaFloatPlusNoviRedPlusNulZnak
call [printf]
;Inline assembly ended.
;i:=i+1
finit
fld dword [i]
mov dword [result],0x3F800000 ;1
fld dword [result]
faddp st1,st0
fstp dword [result]
mov edx, dword [result]
mov dword [i],edx
;EndWhile
finit
jmp l21143
l989379:
;Inline assembly begins.
if ispisPoruka=1
staviIntNaSistemskiStog brojac
staviStringNaSistemskiStog unutrasnjaPetljaString
call [printf]
;Inline assembly ended.
;n*ln(n)/ln(2) ;Ovo ce se spremiti u "result", pomocnu varijablu koju koristi compiler za AEC.
finit
fld dword [n]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fld dword [n]
fxch
fmulp st1,st0
mov dword [result],0x40000000 ;2
fld dword [result]
fld1
fxch
fyl2x
fldl2e
fdivp st1,st0
fdivp st1,st0
fstp dword [result]
;Inline assembly begins.
fld dword [result]
fstp qword [esp] ;"printf" iz MSVCRT-a za "%f" ocekuje 64-bitni "double", ili, na asemblerskom jeziku, "qword".
staviStringNaSistemskiStog slozenostString
call [printf]
push dword [procesorskoVrijeme]
invoke printf,sortiranjeJeTrajalo
invoke system,_pause
end if
invoke exit,0

;"Konstante", ako njih pokusamo mijenjati, dobijemo Segmentation Fault:
_pause db "PAUSE",0
znakZaCijeliBrojBroj db "%d",0
znakZaNoviRedPlusNulZnak db 10,0
znakZaFloatPlusNoviRedPlusNulZnak db "%f",10,0
unutrasnjaPetljaString db "Unutrasnja petlja izvrsila se %d puta.",10,0
slozenostString db "Ocekivani broj ponavljanja te petlje, po formuli n*log2(n), bio bi %.1f.",10,0
sortiranjeJeTrajalo db "Sortiranje je trajalo %d milisekundi.",10,0
razdvajati dd 0f
spajati dd 1f

section '.rdata' readable writable
original:
repeat 32768 ;Nije preporucljivo ovako na asemblerskom deklarirati nizove, ali zasto bih se pretvarao da radim za racunalom s 4 MB RAM-a, gdje je problem ucitati program gdje je jedan segment velik 640 KB?
dd 0
end repeat
n dd ?
result dd ?
brojac dd ?
pokazivac dd ?
i dd ?
stogSDonjimGranicama:
repeat 32768
dd 0
end repeat
stogSGornjimGranicama:
repeat 32768
dd 0
end repeat
pomocni:
repeat 32768
dd 0
end repeat
vrhStoga dd ?
donjaGranica dd ?
gornjaGranica dd ?
staviVece dd ?
staviManje dd ?
gdjeJePivot dd ?
procesorskoVrijeme dd ?
razvrstanost dd ?
razvrstanostNa dd 8 DUP(?)
polinomPodApsolutnom dd ?
eNaKoju dd ?
kolikoUsporedbiOcekujemoOdQuickSorta dd ?
kolikoUsporedbiOcekujemoOdMergeSorta dd ?
najmanjiCijeliBrojKojiSeMozeDodatiNaBrojac dd ?
pomocniBrojac dd ?
testZaPreljev dd ?
gdjeSmoUDrugomNizu dd ?
gdjeSmoUPrvomNizu dd ?
trebaLiSpajatiIliRazdvajati dd ?
sredinaNiza dd ?
stogSPodacimaTrebaLiPetljaRazdvajatiIliSpajatiNizove:
repeat 32768
dd 0
end repeat


section '.idata' data readable import
library msvcrt,'msvcrt.dll' ;"msvcrt.dll" je Microsoft Visual C Runtime Library, dostupna u "C:\Windows\System32\msvcrt.dll" na Windows 98 i novijim.
import msvcrt,printf,'printf',system,'system',exit,'exit',scanf,'scanf',clock,'clock'
;Inline assembly ended.
